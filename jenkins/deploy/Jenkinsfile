pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: "5"))
        timeout time: 60, unit: "MINUTES"
    }

    stages {
        stage("Install") {
            steps {
                configFileProvider([configFile(fileId: "iis-build-properties", variable: 'BUILD_PROPERTIES')]) {
                    load "${BUILD_PROPERTIES}"
                    withEnv(["JAVA_HOME=${ tool type: 'jdk', name: "${JDK_VERSION}" }",
                             "PATH+MAVEN=${tool type: 'maven', name: "${MAVEN_VERSION}"}/bin:${env.JAVA_HOME}/bin"]) {
                        sh """
                            mvn clean install -DskipITs
                        """
                    }
                }
            }
        }

        stage("Deploy Primary") {
            steps {
                configFileProvider([configFile(fileId: "iis-build-properties", variable: 'BUILD_PROPERTIES')]) {
                    load "${BUILD_PROPERTIES}"
                    withEnv(["JAVA_HOME=${ tool type: 'jdk', name: "${JDK_VERSION}" }",
                             "PATH+MAVEN=${tool type: 'maven', name: "${MAVEN_VERSION}"}/bin:${env.JAVA_HOME}/bin"]) {
                        sshagent(['iis-deployment-credentials']) {
                            sh """
                                cd iis-wf/iis-wf-primary && \
                                mvn clean package -Poozie-package,deploy \
                                    -Dworkflow.source.dir=eu/dnetlib/iis/wf/primary/main \
                                    -DiisConnectionProperties=${WORKSPACE}/connection-properties/iis-cdh5-test-gw.properties
                            """
                        }
                    }
                }
            }
        }

        stage("Release Primary") {
            steps {
                script {
                    def propertiesContent = readFile("${WORKSPACE}/connection-properties/iis-cdh5-test-gw.properties")
                    def properties = [:]
                    propertiesContent.split("\\n").each { line ->
                        if (line.contains('=')) {
                            def nameAndValue = line.split('=')
                            properties[nameAndValue[0]] = nameAndValue[1]
                        }
                    }
                    env.USERNAME = properties['iis.hadoop.frontend.user.name']
                    env.HOSTNAME = properties['iis.hadoop.frontend.host.name']
                }
                sshagent(['iis-deployment-credentials']) {
                    sh '''
                        WORKING_DIR=/tmp/${USERNAME}/`date +%Y-%m-%d`/apps/primary
                        ssh ${USERNAME}@${HOSTNAME} "
                            rm -rf ${WORKING_DIR} &&
                            mkdir -p ${WORKING_DIR}
                            "
                        scp -r "${WORKSPACE}"/jenkins/deploy/apps/primary/* ${USERNAME}@${HOSTNAME}:${WORKING_DIR}
                        ssh ${USERNAME}@${HOSTNAME} "
                            cd ${WORKING_DIR} &&
                            sh deploy_release.sh
                            "
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
