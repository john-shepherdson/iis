<workflow-app xmlns="uri:oozie:workflow:0.4" name="importer_content_url">

	<parameters>
		<!-- input -->
        <property>
            <name>objectstore_facade_factory_classname</name>
            <value>eu.dnetlib.iis.wf.importer.facade.WebServiceObjectStoreFacadeFactory</value>
            <description>ServiceFacadeFactory implementation class name producing eu.dnetlib.iis.wf.importer.facade.ObjectStoreFacade</description>
        </property>
		<property>
			<name>objectstore_service_location</name>
			<description>object store service location to retrieve PDF/text contents from</description>
		</property>
		<property>
			<name>approved_objectstores_csv</name>
			<value>$UNDEFINED$</value>
			<description>CSV of approved object stores</description>
		</property>
		<property>
			<name>blacklisted_objectstores_csv</name>
			<value>$UNDEFINED$</value>
			<description>CSV of blacklisted object stores</description>
		</property>
		<property>
			<name>mimetypes_pdf</name>
			<description>pdf mime types</description>
		</property>
		<property>
			<name>mimetypes_text</name>
			<description>text mime types</description>
		</property>
		<property>
			<name>mimetypes_html</name>
			<description>html mime types</description>
		</property>
		<property>
			<name>mimetypes_xml_pmc</name>
			<description>EuropePMC xml mime types</description>
		</property>
		<property>
			<name>mimetypes_wos</name>
			<description>WoS mime types</description>
		</property>
		<property>
			<name>resultset_client_read_timeout</name>
			<value>60000</value>
			<description>result set client reading timeout (expressed in milliseconds)</description>
		</property>
		<!-- input datastores -->
		<property>
			<name>input_id_mapping</name>
			<value>$UNDEFINED$</value>
			<description>input containing id mappings used by id-replacer module to translate identifiers of deduplicated objects</description>
		</property>
		<property>
			<name>input_id</name>
			<value>$UNDEFINED$</value>
			<description>input containing list of identifiers used by existence filter module in order to omit contents which do not have metadata representatives</description>
		</property>
        <property>
            <name>input_objectstore_resultset_pagesize</name>
            <value>100</value>
            <description>ResultSet single page size</description>
        </property>
		<!-- output -->
		<property>
			<name>output_root</name>
			<description>output root directory</description>
		</property>
		<property>
			<name>output_name_pdf</name>
			<value>pdf</value>
			<description>pdf output subdirectory name</description>
		</property>
		<property>
			<name>output_name_text</name>
			<value>text</value>
			<description>text output subdirectory name</description>
		</property>
		<property>
			<name>output_name_html</name>
			<value>html</value>
			<description>html output subdirectory name</description>
		</property>
		<property>
			<name>output_name_xml_pmc</name>
			<value>xmlpmc</value>
			<description>XML PMC output subdirectory name</description>
		</property>
		<property>
			<name>output_name_wos</name>
			<value>wos</value>
			<description>WoS output subdirectory name</description>
		</property>
	</parameters>

	<global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
		</configuration>
	</global>

	<start to="generate-schema" />

	<action name="generate-schema">
	    <java>
	        <main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
	        <arg>eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl</arg>
	        <arg>org.apache.avro.Schema.Type.NULL</arg>
	        <arg>org.apache.avro.Schema.Type.STRING</arg>
	        <capture-output />
	    </java>
	    <ok to="objectstore-content-url-importer" />
	    <error to="fail" />
	</action>
	
	<action name="objectstore-content-url-importer">
		<java>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/imported-urls" />
			</prepare>
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<arg>eu.dnetlib.iis.wf.importer.content.ObjectStoreDocumentContentUrlImporterProcess</arg>
			<arg>-Pimport.content.object.store.location=${objectstore_service_location}</arg>
			<arg>-Pimport.content.approved.objectstores.csv=${approved_objectstores_csv}</arg>
			<arg>-Pimport.content.blacklisted.objectstores.csv=${blacklisted_objectstores_csv}</arg>
			<arg>-Pimport.resultset.client.read.timeout=${resultset_client_read_timeout}</arg>
            <arg>-Pimport.resultset.pagesize=${input_objectstore_resultset_pagesize}</arg>
            <arg>-Pimport.facade.factory.classname=${objectstore_facade_factory_classname}</arg>
			<arg>-Ocontent_url=${workingDir}/imported-urls</arg>
		</java>
		<ok to="input_id_mapping-path-setter" />
		<error to="fail" />
	</action>
	
	<action name='input_id_mapping-path-setter'>
		<java>
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<arg>eu.dnetlib.iis.common.oozie.property.ConditionalPropertySetter</arg>
			<arg>-Pcondition=${input_id_mapping eq "$UNDEFINED$"}</arg>
			<arg>-PinCaseOfTrue=${workingDir}/imported-urls</arg>
			<arg>-PelseCase=${workingDir}/transformers_idreplacer/output</arg>
			<capture-output />
		</java>
		<ok to="decision-id-replacer" />
		<error to="fail" />
	</action>
	
	<decision name="decision-id-replacer">
        <switch>
            <case to="input_id-path-setter">${input_id_mapping eq "$UNDEFINED$"}</case>
            <default to="transformers_idreplacer"/>
        </switch>
    </decision>
	
	<action name="transformers_idreplacer">
		<sub-workflow>
            <app-path>${wf:appPath()}/transformers_idreplacer</app-path>
            <propagate-configuration/>
            <configuration>
            	<property>
                    <name>workingDir</name>
                    <value>${workingDir}/transformers_idreplacer/working_dir</value>
                </property>
				<property>
                    <name>id_field_to_replace1</name>
                    <value>id</value>
                </property>
				<property>
                    <name>schema</name>
                    <value>eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl</value>
                </property>
                <property>
                    <name>input</name>
                    <value>${workingDir}/imported-urls</value>
                </property>
                <property>
                    <name>input_id_mapping</name>
                    <value>${input_id_mapping}</value>
                </property>
				<property>
                    <name>output</name>
                    <value>${workingDir}/transformers_idreplacer/output</value>
                </property>
			</configuration>
        </sub-workflow>
		<ok to="input_id-path-setter" />
		<error to="fail" />
	</action>
	
	<action name='input_id-path-setter'>
		<java>
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<arg>eu.dnetlib.iis.common.oozie.property.ConditionalPropertySetter</arg>
			<arg>-Pcondition=${input_id eq "$UNDEFINED$"}</arg>
			<arg>-PinCaseOfTrue=${wf:actionData('input_id_mapping-path-setter')['result']}</arg>
			<arg>-PelseCase=${workingDir}/transformers_common_existencefilter/output</arg>
			<capture-output />
		</java>
		<ok to="decision-existence-filter" />
		<error to="fail" />
	</action>
	
	<decision name="decision-existence-filter">
        <switch>
            <case to="content-url-dispatcher">${input_id eq "$UNDEFINED$"}</case>
            <default to="transformers_common_existencefilter"/>
        </switch>
    </decision>
	
	<action name="transformers_common_existencefilter">
		<sub-workflow>
            <app-path>${wf:appPath()}/transformers_common_existencefilter</app-path>
            <propagate-configuration/>
            <configuration>
            	<property>
                    <name>workingDir</name>
                    <value>${workingDir}/transformers_common_existencefilter/working_dir</value>
                </property>
				<property>
                    <name>input_data</name>
                    <value>${wf:actionData('input_id_mapping-path-setter')['result']}</value>
                </property>
				<property>
                    <name>input_existent_id</name>
                    <value>${input_id}</value>
                </property>
				<property>
                    <name>output_filtered</name>
                    <value>${workingDir}/transformers_common_existencefilter/output</value>
                </property>
			</configuration>
        </sub-workflow>
		<ok to="content-url-dispatcher" />
		<error to="fail" />
	</action>
	
	<action name="content-url-dispatcher">
		<map-reduce>
			<prepare>
				<delete path="${nameNode}${output_root}" />
			</prepare>
			<configuration>
				<property>
					<name>mapreduce.job.inputformat.class</name>
					<value>org.apache.avro.mapreduce.AvroKeyInputFormat</value>
				</property>
				<property>
					<name>mapreduce.map.output.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapreduce.map.output.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapreduce.job.output.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapreduce.job.output.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapreduce.job.output.key.comparator.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				<property>
					<name>io.serializations</name>
					<value>org.apache.hadoop.io.serializer.WritableSerialization,org.apache.hadoop.io.serializer.avro.AvroSpecificSerialization,org.apache.hadoop.io.serializer.avro.AvroReflectSerialization,org.apache.avro.hadoop.io.AvroSerialization
					</value>
				</property>
				<property>
					<name>mapreduce.job.output.group.comparator.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				<property>
					<name>rpc.engine.org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolPB
					</name>
					<value>org.apache.hadoop.ipc.ProtobufRpcEngine</value>
				</property>
				<property>
					<name>mapred.mapper.new-api</name>
					<value>true</value>
				</property>
				<property>
					<name>mapred.reducer.new-api</name>
					<value>true</value>
				</property>
				<!-- required for multiple outputs only -->
				<property>
					<name>avro.mapreduce.multipleoutputs</name>
					<value>${output_name_pdf} ${output_name_text} ${output_name_html} ${output_name_xml_pmc} ${output_name_wos}</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_pdf}.format
					</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_text}.format
					</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_html}.format
					</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_xml_pmc}.format
					</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_wos}.format
					</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_pdf}.keyschema</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl']}</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_text}.keyschema</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl']}</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_html}.keyschema</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl']}</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_xml_pmc}.keyschema</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl']}</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_wos}.keyschema</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl']}</value>
				</property>
				<!-- mimetypes related -->
				<property>
					<name>mimetypes.csv.${output_name_pdf}</name>
					<value>${mimetypes_pdf}</value>
				</property>
				<property>
					<name>mimetypes.csv.${output_name_text}</name>
					<value>${mimetypes_text}</value>
				</property>
				<property>
					<name>mimetypes.csv.${output_name_html}</name>
					<value>${mimetypes_html}</value>
				</property>
				<property>
					<name>mimetypes.csv.${output_name_xml_pmc}</name>
					<value>${mimetypes_xml_pmc}</value>
				</property>
				<property>
					<name>mimetypes.csv.${output_name_wos}</name>
					<value>${mimetypes_wos}</value>
				</property>
				<property>
					<name>mapreduce.job.map.class</name>
					<value>eu.dnetlib.iis.wf.importer.content.DocumentContentUrlDispatcher</value>
				</property>
				<property>
					<name>avro.schema.input.key</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl']}</value>
				</property>
				<property>
					<name>mapreduce.input.fileinputformat.inputdir</name>
					<value>${wf:actionData('input_id-path-setter')['result']}</value>
				</property>
				<property>
					<name>mapreduce.output.fileoutputformat.outputdir</name>
					<value>${output_root}</value>
				</property>
				 <property>
                    <name>mapreduce.job.reduces</name>
                    <value>0</value>
                </property>
			</configuration>
		</map-reduce>
		<ok to="end" />
		<error to="fail" />
	</action>
	
	<kill name="fail">
		<message>Unfortunately, the process failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]</message>
	</kill>
	<end name="end" />
</workflow-app>
