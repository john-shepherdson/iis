<workflow-app xmlns="uri:oozie:workflow:0.4" name="importer_infospace">

    <parameters>
        <property>
            <name>input_root_path</name>
            <description>materialized InfoSpace graph HDFS root directory location</description>
        </property>
        <property>
            <name>input_format</name>
            <value>parquet</value>
            <description>data input format</description>
        </property>
        <property>
            <name>inference_provenance_blacklist</name>
            <value>iis</value>
            <description>list of blacklisted inference provenance which sould not be taken into account by importer, skipped when set to $UNDEFINED$</description>
        </property>
        <property>
            <name>skip_deleted_by_inference</name>
            <value>true</value>
            <description>flag indicating records deleted by inference should be skipped</description>
        </property>
        <property>
            <name>trust_level_threshold</name>
            <value>$UNDEFINED$</value>
            <description>trust level threshold represented as float value, ignored when set to $UNDEFINED$ value</description>
        </property>
        <!-- output subdirectory names -->
        <property>
            <name>output_name_document_meta</name>
            <value>docmeta</value>
            <description>document metadata output name</description>
        </property>
        <property>
            <name>output_name_dataset_meta</name>
            <value>dataset</value>
            <description>dataset metadata output name</description>
        </property>
        <property>
            <name>output_name_document_project</name>
            <value>docproject</value>
            <description>document-project relation output name</description>
        </property>
        <property>
            <name>output_name_project</name>
            <value>project</value>
            <description>project output name</description>
        </property>
        <property>
            <name>output_name_dedup_mapping</name>
            <value>dedupmapping</value>
            <description>deduplication mapping output name</description>
        </property>
        <property>
            <name>output_name_organization</name>
            <value>organization</value>
            <description>organization output name</description>
        </property>
        <property>
            <name>output_name_project_organization</name>
            <value>projectorg</value>
            <description>project-organization output name</description>
        </property>
        <property>
            <name>document_metadata_avro_truncator_factory_class_name</name>
            <value>eu.dnetlib.iis.wf.importer.infospace.truncator.factory.DefaultDocumentMetadataAvroTruncatorFactory</value>
            <description>factory class name for creation document metadata truncator</description>
        </property>
        <!--  -->        
        <property>
            <name>output</name>
            <description>patents avro datastore output</description>
        </property>
        <property>
            <name>output_report_root_path</name>
            <description>base directory for storing reports</description>
        </property>
        <property>
            <name>output_report_relative_path</name>
            <value>import_infospace</value>
            <description>directory for storing report (relative to output_report_root_path)</description>
        </property>
        <property>
            <name>sparkDriverMemory</name>
            <description>memory for driver process</description>
        </property>
        <property>
            <name>sparkExecutorMemory</name>
            <description>memory for individual executor</description>
        </property>
        <property>
            <name>sparkExecutorCores</name>
            <description>number of cores used by single executor</description>
        </property>
        <property>
            <name>oozieActionShareLibForSpark2</name>
            <description>oozie action sharelib for spark 2.*</description>
        </property>
        <property>
            <name>spark2ExtraListeners</name>
            <value>com.cloudera.spark.lineage.NavigatorAppListener</value>
            <description>spark 2.* extra listeners classname</description>
        </property>
        <property>
            <name>spark2SqlQueryExecutionListeners</name>
            <value>com.cloudera.spark.lineage.NavigatorQueryListener</value>
            <description>spark 2.* sql query execution listeners classname</description>
        </property>
        <property>
            <name>spark2YarnHistoryServerAddress</name>
            <description>spark 2.* yarn history server address</description>
        </property>
        <property>
            <name>spark2EventLogDir</name>
            <description>spark 2.* event log dir location</description>
        </property>
    </parameters>

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
            <property>
                <name>oozie.action.sharelib.for.spark</name>
                <value>${oozieActionShareLibForSpark2}</value>
            </property>
        </configuration>
    </global>

    <start to="infospace-importer"/>

    <action name="infospace-importer">
        <spark xmlns="uri:oozie:spark-action:0.2">
            <prepare>
                <delete path="${nameNode}${output}"/>
                <delete path="${nameNode}${output_report_root_path}/${output_report_relative_path}"/>
            </prepare>
            <master>yarn-cluster</master>
            <mode>cluster</mode>
            <name>import-infospace-hdp</name>
            <class>eu.dnetlib.iis.wf.importer.infospace.ImportInformationSpaceJob</class>
            <jar>${oozieTopWfApplicationPath}/lib/iis-wf-import-${projectVersion}.jar</jar>
            <spark-opts>
                --executor-memory=${sparkExecutorMemory}
                --executor-cores=${sparkExecutorCores}
                --driver-memory=${sparkDriverMemory}
                --conf spark.extraListeners=${spark2ExtraListeners}
                --conf spark.sql.queryExecutionListeners=${spark2SqlQueryExecutionListeners}
                --conf spark.yarn.historyServer.address=${spark2YarnHistoryServerAddress}
                --conf spark.eventLog.dir=${nameNode}${spark2EventLogDir}
            </spark-opts>
            <arg>-inputRootPath=${input_root_path}</arg>
            <arg>-inputFormat=${input_format}</arg>
            <arg>-outputPath=${output}</arg>
            <arg>-outputReportPath=${output_report_root_path}/${output_report_relative_path}</arg>
            
            <arg>-skipDeletedByInference=${skip_deleted_by_inference}</arg>
            <arg>-trustLevelThreshold=${trust_level_threshold}</arg>
            <arg>-inferenceProvenanceBlacklist=${inference_provenance_blacklist}</arg>
            
            <arg>-outputNameDocumentMeta=${output_name_document_meta}</arg>
            <arg>-outputNameDatasetMeta=${output_name_dataset_meta}</arg>
            <arg>-outputNameDocumentProject=${output_name_document_project}</arg>
            <arg>-outputNameProject=${output_name_project}</arg>
            <arg>-outputNameDedupMapping=${output_name_dedup_mapping}</arg>
            <arg>-outputNameOrganization=${output_name_organization}</arg>
            <arg>-outputNameProjectOrganization=${output_name_project_organization}</arg>
            <arg>-documentMetadataAvroTruncatorFactoryClassName=${document_metadata_avro_truncator_factory_class_name}</arg>

        </spark>
        <ok to="end"/>
        <error to="fail"/>
    </action>

    <kill name="fail">
        <message>Unfortunately, the process failed -- error message:
            [${wf:errorMessage(wf:lastErrorNode())}]
        </message>
    </kill>

    <end name="end"/>

</workflow-app>
