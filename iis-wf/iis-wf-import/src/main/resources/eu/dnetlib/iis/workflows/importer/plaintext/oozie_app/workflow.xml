<workflow-app xmlns="uri:oozie:workflow:0.4" name="importer_plaintext">

	<parameters>
		<property>
			<name>input</name>
			<description>text importer input directory</description>
		</property>
		<property>
			<name>max_file_size_mb</name>
			<value>$UNDEFINED$</value>
			<description>maximum allowed file size in Megabytes</description>
		</property>
		<property>
			<name>mapred_max_split_size</name>
			<value>100000</value>
			<description>maximum input data split size, required by streaming version reading DocumentContentUrl to split input data into more chunks</description>
		</property>
		<property>
			<name>output</name>
			<description>text importer output directory</description>
		</property>
	</parameters>

	<start to="generate-schema" />

	<action name="generate-schema">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
			<arg>eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl</arg>
			<arg>eu.dnetlib.iis.metadataextraction.schemas.DocumentText</arg>
			<arg>org.apache.avro.Schema.Type.NULL</arg>
			<capture-output />
		</java>
		<ok to="content-retriever" />
		<error to="fail" />
	</action>

	<action name="content-retriever">
		<map-reduce>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${output}" />
			</prepare>
			<configuration>
				<property>
					<name>mapreduce.inputformat.class</name>
					<value>org.apache.avro.mapreduce.AvroKeyInputFormat</value>
				</property>
				<!-- The output format seems to be required, JSON is written when missing -->
				<property>
					<name>mapreduce.outputformat.class</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
				<property>
					<name>mapred.mapoutput.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapred.mapoutput.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapred.output.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapred.output.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapred.output.key.comparator.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				<property>
					<name>io.serializations</name>
					<value>org.apache.hadoop.io.serializer.WritableSerialization,org.apache.hadoop.io.serializer.avro.AvroSpecificSerialization,org.apache.hadoop.io.serializer.avro.AvroReflectSerialization,org.apache.avro.hadoop.io.AvroSerialization
					</value>
				</property>
				<property>
					<name>mapred.output.value.groupfn.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>

				<property>
					<name>rpc.engine.org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolPB
					</name>
					<value>org.apache.hadoop.ipc.ProtobufRpcEngine</value>
				</property>

				<!-- This is required for new api usage -->
				<property>
					<name>mapred.mapper.new-api</name>
					<value>true</value>
				</property>
				<property>
					<name>mapred.reducer.new-api</name>
					<value>true</value>
				</property>

				<!-- Standard stuff for our framework -->
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>

				<property>
					<name>avro.schema.input.key</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl']}</value>
				</property>

				<property>
					<name>avro.serialization.key.reader.schema</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
				</property>
				<property>
					<name>avro.serialization.key.writer.schema</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
				</property>

				<property>
					<name>avro.serialization.value.reader.schema</name>
					<value>${wf:actionData('generate-schema')['org.apache.avro.Schema.Type.NULL']}</value>
				</property>
				<property>
					<name>avro.serialization.value.writer.schema</name>
					<value>${wf:actionData('generate-schema')['org.apache.avro.Schema.Type.NULL']}</value>
				</property>

				<property>
					<name>avro.schema.output.key</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
				</property>

				<property>
					<name>mapred.input.dir</name>
					<value>${input}</value>
				</property>
				<property>
					<name>mapred.output.dir</name>
					<value>${output}</value>
				</property>
				<property>
					<name>import.content.max.file.size.mb</name>
					<value>${max_file_size_mb}</value>
				</property>
				<property>
					<name>mapred.max.split.size</name>
					<value>${mapred_max_split_size}</value>
				</property>
				<!-- disabling speculative run to be less invasive to ObjectStore -->
				<property>
					<name>mapred.map.tasks.speculative.execution</name>
					<value>false</value>
				</property>
				<property>
					<!-- supported since hadoop 2.3.0 -->
					<name>mapreduce.map.speculative</name>
					<value>false</value>
				</property>
				<property>
					<name>mapreduce.map.class</name>
					<value>eu.dnetlib.iis.workflows.importer.content.DocumentTextUrlBasedImporterMapper</value>
				</property>
				<property>
					<name>mapred.reduce.tasks</name>
					<value>0</value>
				</property>
			</configuration>
		</map-reduce>
		<ok to="end" />
		<error to="fail" />
	</action>

	<kill name="fail">
		<message>Unfortunately, the process failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]
		</message>
	</kill>
	<end name="end" />
</workflow-app>
