<?xml version="1.0"?>
<workflow-app xmlns="uri:oozie:workflow:0.4" name="origins_collapser">

	<parameters>
		<property>
			<name>origins</name>
			<description>comma separated list of origins sorted by origin confidence in descending order</description>
		</property>
		<property>
			<name>blocking_field</name>
			<description>"blocking" field name to group duplicate records by</description>
		</property>
		<property>
			<name>input</name>
			<description>input main port</description>
		</property>
		<property>
			<name>schema_input</name>
			<description>input schema</description>
		</property>
		<property>
			<name>output</name>
			<description>output port</description>
		</property>
		<property>
			<name>schema_output</name>
			<description>output schema</description>
		</property>
		<property>
			<name>record_collapser</name>
			<value>eu.dnetlib.iis.wf.collapsers.origins.OriginConfidenceCollapser</value>
			<description>record collapser class</description>
		</property>
		<property>
			<name>mapred_child_java_opts</name>
			<value>-Xmx2048M</value>
			<description>java-opts, e.g. maximum heap size for a single JVM running MapReduce</description>
		</property>
	</parameters>

	<start to="generate-schema" />

	<action name="generate-schema">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
			<arg>${schema_input}</arg>
			<arg>${schema_output}</arg>
			<capture-output />
		</java>
		<ok to="collapser" />
		<error to="fail" />
	</action>

	<action name="collapser">
		<map-reduce>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${output}" />
				<delete path="${nameNode}${workingDir}/collapser" />
				<mkdir path="${nameNode}${workingDir}/collapser" />
			</prepare>
			<configuration>
				<!-- # This is a standard set of options that stays the same regardless of a concrete definition of map-reduce job -->

				<!-- ## Various options -->

				<property>
					<name>mapred.reduce.tasks</name>
					<value>36</value>
				</property>
				<property>
					<name>mapred.child.java.opts</name>
					<value>${mapred_child_java_opts}</value>
				</property>

				<property>
					<name>mapreduce.inputformat.class</name>
					<value>org.apache.avro.mapreduce.AvroKeyInputFormat</value>
				</property>
				<property>
					<name>mapreduce.outputformat.class</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
				<property>
					<name>mapred.mapoutput.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapred.mapoutput.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapred.output.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapred.output.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapred.output.key.comparator.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				<property>
					<name>io.serializations</name>
					<value>org.apache.hadoop.io.serializer.WritableSerialization,org.apache.hadoop.io.serializer.avro.AvroSpecificSerialization,org.apache.hadoop.io.serializer.avro.AvroReflectSerialization,org.apache.avro.hadoop.io.AvroSerialization
					</value>
				</property>
				<property>
					<name>mapred.output.value.groupfn.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				<property>
					<name>rpc.engine.org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolPB
					</name>
					<value>org.apache.hadoop.ipc.ProtobufRpcEngine</value>
				</property>

				<!-- ## This is required for new MapReduce API usage -->

				<property>
					<name>mapred.mapper.new-api</name>
					<value>true</value>
				</property>
				<property>
					<name>mapred.reducer.new-api</name>
					<value>true</value>
				</property>

				<!-- # Job-specific options -->

				<!-- ## Classes of mapper and reducer -->

				<property>
					<name>mapreduce.map.class</name>
					<value>eu.dnetlib.iis.wf.collapsers.GroupByFieldMapper</value>
				</property>
				<property>
					<name>mapreduce.reduce.class</name>
					<value>eu.dnetlib.iis.wf.collapsers.CollapserReducer</value>
				</property>

				<!-- ## Schemas -->

				<!-- ### Schema of the data ingested by the mapper. To be more precise, it's the schema of Avro data passed as template parameter of the AvroKey object passed to mapper -->
				<property>
					<name>avro.schema.input.key</name>
					<value>${wf:actionData('generate-schema')[wf:conf('schema_input')]}</value>
				</property>

				<!-- ### Schemas of the data produced by the mapper -->

				<!-- #### Schema of the key produced by the mapper. To be more precise, it's the schema of Avro data produced by the mapper and passed forward as template parameter of AvroKey object. -->
				<property>
					<name>avro.serialization.key.reader.schema</name>
					<value>"string"</value>
				</property>
				<property>
					<name>avro.serialization.key.writer.schema</name>
					<value>"string"</value>
				</property>

				<!-- #### Schema of the value produced by the mapper. To be more precise, it's the schema of Avro data produced by the mapper and passed forward as template parameter of AvroValue object. -->
				<property>
					<name>avro.serialization.value.reader.schema</name>
					<value>${wf:actionData('generate-schema')[wf:conf('schema_input')]}</value>
				</property>
				<property>
					<name>avro.serialization.value.writer.schema</name>
					<value>${wf:actionData('generate-schema')[wf:conf('schema_input')]}</value>
				</property>

				<property>
					<name>collapser.reducer.schema.class</name>
					<value>${schema_input}</value>
				</property>

				<!-- ### Schema of the data produced by the reducer. -->
				<property>
					<name>avro.schema.output.key</name>
					<value>${wf:actionData('generate-schema')[wf:conf('schema_output')]}</value>
				</property>
				<!-- ## Specification of the input and output data store -->
				<property>
					<name>mapred.input.dir</name>
					<value>${input}</value>
				</property>
				<property>
					<name>mapred.output.dir</name>
					<value>${output}</value>
				</property>
				<!-- ## Workflow node parameters -->
				<property>
					<name>origins</name>
					<value>${origins}</value>
				</property>
				<property>
					<name>blocking_field</name>
					<value>${blocking_field}</value>
				</property>
				<property>
					<name>record_collapser</name>
					<value>${record_collapser}</value>
				</property>
			</configuration>
		</map-reduce>
		<ok to="end" />
		<error to="fail" />
	</action>
	<kill name="fail">
		<message>Unfortunately, the process failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]
		</message>
	</kill>
	<end name="end" />
</workflow-app>
