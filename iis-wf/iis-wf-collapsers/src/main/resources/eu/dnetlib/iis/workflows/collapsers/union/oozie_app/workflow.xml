<workflow-app xmlns="uri:oozie:workflow:0.4" name="union">

	<parameters>
		<property>
			<name>origin_1</name>
			<description>origin of the first port</description>
		</property>
		<property>
			<name>input_1</name>
			<description>first port</description>
		</property>
		<property>
			<name>origin_2</name>
			<description>origin of the second port</description>
		</property>
		<property>
			<name>input_2</name>
			<description>second port</description>
		</property>
		<property>
			<name>origin_3</name>
			<value>$UNDEFINED$</value>
			<description>origin of the third port; optional</description>
		</property>
		<property>
			<name>input_3</name>
			<value>$UNDEFINED$</value>
			<description>third port; optional</description>
		</property>
		<property>
			<name>schema_input</name>
			<description>input schema</description>
		</property>
		<property>
			<name>output</name>
			<description>output port</description>
		</property>
		<property>
			<name>schema_output</name>
			<description>output schema</description>
		</property>
		<property>
			<name>mapred_child_java_opts</name>
			<value>-Xmx2048M</value>
			<description>java-opts, e.g. maximum heap size for a single JVM running MapReduce</description>
		</property>
	</parameters>

	<global>
		<job-tracker>${jobTracker}</job-tracker>
		<name-node>${nameNode}</name-node>
		<configuration>
			<property>
				<name>mapred.job.queue.name</name>
				<value>${queueName}</value>
			</property>
		</configuration>
	</global>

	<start to="generate-schema" />

	<action name="generate-schema">
		<java>
			<main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
			<arg>${schema_input}</arg>
			<arg>${schema_output}</arg>
			<capture-output />
		</java>
		<ok to="union_origin_fork" />
		<error to="fail" />
	</action>

	<fork name="union_origin_fork">
		<path start="union_origin_1" />
		<path start="union_origin_2" />
		<path start="decision_union_origin_3" />
	</fork>

	<action name="union_origin_1">
		<pig>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/union_origin_1" />
				<delete path="${nameNode}${output}" />
				<mkdir path="${nameNode}${workingDir}/union_origin_1" />
			</prepare>
			<!-- Path to PIG script the workflow executes. -->
			<script>lib/scripts/origin_add.pig</script>

			<param>input=${input_1}</param>
			<param>schema_input=${wf:actionData('generate-schema')[wf:conf('schema_input')]}</param>

			<param>output=${workingDir}/union_origin_1/output</param>
			<param>schema_output=${wf:actionData('generate-schema')[wf:conf('schema_output')]}</param>

			<param>origin_value=${origin_1}</param>

			<param>mapred_child_java_opts=${mapred_child_java_opts}</param>
		</pig>
		<ok to="union_origin_join" />
		<error to="fail" />
	</action>

	<action name="union_origin_2">
		<pig>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/union_origin_2" />
				<delete path="${nameNode}${output}" />
				<mkdir path="${nameNode}${workingDir}/union_origin_2" />
			</prepare>
			<!-- Path to PIG script the workflow executes. -->
			<script>lib/scripts/origin_add.pig</script>

			<param>input=${input_2}</param>
			<param>schema_input=${wf:actionData('generate-schema')[wf:conf('schema_input')]}</param>

			<param>output=${workingDir}/union_origin_2/output</param>
			<param>schema_output=${wf:actionData('generate-schema')[wf:conf('schema_output')]}</param>

			<param>origin_value=${origin_2}</param>

			<param>mapred_child_java_opts=${mapred_child_java_opts}</param>
		</pig>
		<ok to="union_origin_join" />
		<error to="fail" />
	</action>

	<decision name="decision_union_origin_3">
		<switch>
			<case to="union_origin_join">${origin_3 eq "$UNDEFINED$"}</case>
			<default to="union_origin_3" />
		</switch>
	</decision>

	<action name="union_origin_3">
		<pig>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/union_origin_3" />
				<delete path="${nameNode}${output}" />
				<mkdir path="${nameNode}${workingDir}/union_origin_3" />
			</prepare>
			<!-- Path to PIG script the workflow executes. -->
			<script>lib/scripts/origin_add.pig</script>

			<param>input=${input_3}</param>
			<param>schema_input=${wf:actionData('generate-schema')[wf:conf('schema_input')]}</param>

			<param>output=${workingDir}/union_origin_3/output</param>
			<param>schema_output=${wf:actionData('generate-schema')[wf:conf('schema_output')]}</param>

			<param>origin_value=${origin_3}</param>

			<param>mapred_child_java_opts=${mapred_child_java_opts}</param>
		</pig>
		<ok to="union_origin_join" />
		<error to="fail" />
	</action>

	<join name="union_origin_join" to="decision_union_merge" />

	<decision name="decision_union_merge">
		<switch>
			<case to="union_merge_2">${origin_3 eq "$UNDEFINED$"}</case>
			<default to="union_merge_3" />
		</switch>
	</decision>

	<action name="union_merge_2">
		<pig>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${output}" />
			</prepare>
			<!-- Path to PIG script the workflow executes. -->
			<script>lib/scripts/union2.pig</script>

			<param>input_1=${workingDir}/union_origin_1/output</param>
			<param>input_2=${workingDir}/union_origin_2/output</param>
			<param>schema_input=${wf:actionData('generate-schema')[wf:conf('schema_output')]}</param>

			<param>output=${output}</param>
			<param>schema_output=${wf:actionData('generate-schema')[wf:conf('schema_output')]}</param>

			<param>mapred_child_java_opts=${mapred_child_java_opts}</param>
		</pig>
		<ok to="end" />
		<error to="fail" />
	</action>

	<action name="union_merge_3">
		<pig>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${output}" />
			</prepare>
			<!-- Path to PIG script the workflow executes. -->
			<script>lib/scripts/union3.pig</script>

			<param>input_1=${workingDir}/union_origin_1/output</param>
			<param>input_2=${workingDir}/union_origin_2/output</param>
			<param>input_3=${workingDir}/union_origin_3/output</param>
			<param>schema_input=${wf:actionData('generate-schema')[wf:conf('schema_output')]}</param>

			<param>output=${output}</param>
			<param>schema_output=${wf:actionData('generate-schema')[wf:conf('schema_output')]}</param>

			<param>mapred_child_java_opts=${mapred_child_java_opts}</param>
		</pig>
		<ok to="end" />
		<error to="fail" />
	</action>

	<kill name="fail">
		<message>Unfortunately, the workflow failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]
		</message>
	</kill>

	<end name="end" />
</workflow-app>
