<?xml version="1.0"?>
<workflow-app xmlns="uri:oozie:workflow:0.4" name="referenceextraction_covid19_main">
	
	<parameters>
		<property>
			<name>input_document_metadata</name>
			<description>input document metadata with eu.dnetlib.iis.transformers.metadatamerger.schemas.ExtractedDocumentMetadataMergedWithOriginal avro records</description>
		</property>
		<property>
			<name>output</name>
			<description>publications with covid19 references encoded as eu.dnetlib.iis.referenceextraction.researchinitiative.schemas.DocumentToConceptId avro records</description>
		</property>
        <property>
            <name>covid19ConceptId</name>
            <value>covid-19</value>
            <description>predefined concept id to be generated for covid19 mining outcome</description>
        </property>
        <property>
            <name>covid19ConfidenceLevel</name>
            <value>0.8</value>
            <description>predefined confidence level to be generated for covid19 mining outcome</description>
        </property>
        <property>
            <name>sparkDriverMemory</name>
            <description>memory for driver process</description>
        </property>
        <property>
            <name>sparkExecutorMemory</name>
            <description>memory for individual executor</description>
        </property>
        <property>
            <name>sparkExecutorCores</name>
            <description>number of cores used by single executor</description>
        </property>
        <property>
            <name>oozieActionShareLibForSpark2</name>
            <description>oozie action sharelib for spark 2.*</description>
        </property>
        <property>
            <name>spark2ExtraListeners</name>
            <value>com.cloudera.spark.lineage.NavigatorAppListener</value>
            <description>spark 2.* extra listeners classname</description>
        </property>
        <property>
            <name>spark2SqlQueryExecutionListeners</name>
            <value>com.cloudera.spark.lineage.NavigatorQueryListener</value>
            <description>spark 2.* sql query execution listeners classname</description>
        </property>
        <property>
            <name>spark2YarnHistoryServerAddress</name>
            <description>spark 2.* yarn history server address</description>
        </property>
        <property>
            <name>spark2EventLogDir</name>
            <description>spark 2.* event log dir location</description>
        </property>
	</parameters>

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
	<start to="generate-schema" />

	<action name="generate-schema">
	    <java>
	        <main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
	        <arg>eu.dnetlib.iis.referenceextraction.covid19.schemas.DocumentMetadata</arg>
	        <arg>eu.dnetlib.iis.referenceextraction.covid19.schemas.MatchedDocument</arg>
	        <capture-output />
	    </java>
	    <ok to="input-transformer" />
	    <error to="fail" />
	</action>

    <action name="input-transformer">
        <spark xmlns="uri:oozie:spark-action:0.2">
            <prepare>
                <delete path="${nameNode}${workingDir}/meta_with_text" />
            </prepare>
            <configuration>
                <property>
                    <name>oozie.action.sharelib.for.spark</name>
                    <value>${oozieActionShareLibForSpark2}</value>
                </property>
            </configuration>
            <master>yarn-cluster</master>
            <mode>cluster</mode>
            <name>covid19-referenceextraction-input-transformer</name>
            <class>eu.dnetlib.iis.wf.referenceextraction.covid19.input.Covid19ReferenceExtractionInputTransformerJob</class>
            <jar>${oozieTopWfApplicationPath}/lib/iis-wf-referenceextraction-${projectVersion}.jar</jar>
            <spark-opts>
                --executor-memory=${sparkExecutorMemory}
                --executor-cores=${sparkExecutorCores}
                --driver-memory=${sparkDriverMemory}
                --conf spark.extraListeners=${spark2ExtraListeners}
                --conf spark.sql.queryExecutionListeners=${spark2SqlQueryExecutionListeners}
                --conf spark.yarn.historyServer.address=${spark2YarnHistoryServerAddress}
                --conf spark.eventLog.dir=${nameNode}${spark2EventLogDir}
            </spark-opts>
            <arg>-input = ${input_document_metadata}</arg>
            <arg>-output = ${workingDir}/transformed_meta</arg>
        </spark>
        <ok to="main_sqlite"/>
        <error to="fail"/>
    </action>

    <action name="main_sqlite">
        <map-reduce>
            <prepare>
                <delete path="${nameNode}${workingDir}/matched_documents"/>
            </prepare>
            <streaming>
                <mapper>scripts/madis/mexec.py -f scripts/covid19extract.sql</mapper>
            </streaming>
            <configuration>
                <property>
                    <name>mapred.output.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONOutputFormat</value>
                </property>
                <property>
                    <name>mapred.input.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONInputFormat</value>
                </property>
                <!-- # Custom settings for this workflow node -->
                <!-- We do not use any reducers, so we set their number to 0 -->
                <property>
                    <name>mapreduce.job.reduces</name>
                    <value>0</value>
                </property>
                
                <!-- INPUT -->
                <property>
                    <name>mapreduce.input.fileinputformat.inputdir</name>
                    <value>${workingDir}/transformed_meta</value>
                </property>

                <property>
                    <name>input.schema.literal</name>
                    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.referenceextraction.covid19.schemas.DocumentMetadata']}</value>
                </property>

				<!-- OUTPUT -->
                <property>
                    <name>mapreduce.output.fileoutputformat.outputdir</name>
                    <value>${workingDir}/matched_documents</value>
                </property>          

                <property>
                    <name>output.schema.literal</name>
                    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.referenceextraction.covid19.schemas.MatchedDocument']}</value>
                </property>

				<!-- this one is required due to the large amount of time taken 
					by process storing plaintexts into the database -->
				<property>
					<name>mapreduce.task.timeout</name>
					<value>43200000</value>
				</property>
                <property>
                    <name>oozie.action.external.stats.write</name>
                    <value>true</value>
                </property>
            </configuration>
        </map-reduce>
        <ok to="output-transformer"/>
        <error to="fail"/>
    </action>
    
    
    <action name="output-transformer">
        <spark xmlns="uri:oozie:spark-action:0.2">
            <prepare>
                <delete path="${output}" />
            </prepare>
            <configuration>
                <property>
                    <name>oozie.action.sharelib.for.spark</name>
                    <value>${oozieActionShareLibForSpark2}</value>
                </property>
            </configuration>
            <master>yarn-cluster</master>
            <mode>cluster</mode>
            <name>covid19-referenceextraction-output-transformer</name>
            <class>eu.dnetlib.iis.wf.referenceextraction.covid19.output.Covid19ToConceptIdTransformerJob</class>
            <jar>${oozieTopWfApplicationPath}/lib/iis-wf-referenceextraction-${projectVersion}.jar</jar>
            <spark-opts>
                --executor-memory=${sparkExecutorMemory}
                --executor-cores=${sparkExecutorCores}
                --driver-memory=${sparkDriverMemory}
                --conf spark.extraListeners=${spark2ExtraListeners}
                --conf spark.sql.queryExecutionListeners=${spark2SqlQueryExecutionListeners}
                --conf spark.yarn.historyServer.address=${spark2YarnHistoryServerAddress}
                --conf spark.eventLog.dir=${nameNode}${spark2EventLogDir}
            </spark-opts>
            <arg>-input = ${workingDir}/matched_documents</arg>
            <arg>-output = ${output}</arg>
            <arg>-predefinedConceptId = ${covid19ConceptId}</arg>
            <arg>-predefinedConfidenceLevel = ${covid19ConfidenceLevel}</arg>
        </spark>
        <ok to="end"/>
        <error to="fail"/>
    </action>
    
    <kill name="fail">
        <message>Unfortunately, the process failed -- error message:
        			[${wf:errorMessage(wf:lastErrorNode())}]
        		</message>
    </kill>

    <end name="end"/>
</workflow-app>
