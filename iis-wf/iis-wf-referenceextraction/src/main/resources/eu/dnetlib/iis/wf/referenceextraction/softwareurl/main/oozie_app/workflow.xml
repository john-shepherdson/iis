<?xml version="1.0"?>
<workflow-app xmlns="uri:oozie:workflow:0.4" name="referenceextraction_softwareurl_main">

    <parameters>
        <property>
            <name>input_document_text</name>
            <description>input document text</description>
        </property>
        <property>
            <name>input_softwareheritage_origins_db</name>
            <value>/cache/external-resources/software-heritage/origins.db</value>
            <description>input software heritage origins SQLite DB path</description>
        </property>
        <property>
            <name>output</name>
            <description>output document to software links</description>
        </property>
        <property>
            <name>output_report_root_path</name>
            <description>base directory for storing reports</description>
        </property>
        <property>
            <name>output_report_relative_path</name>
            <value>referenceextraction_software</value>
            <description>directory for storing report (relative to output_report_root_path)</description>
        </property>
        <property>
            <name>webcrawlContentRetrieverFactoryClassName</name>
            <value>eu.dnetlib.iis.wf.referenceextraction.softwareurl.HttpContentRetrieverFactory</value>
            <description>factory class producing the module responsible for obtaining contents for given url</description>
        </property>
        <property>
            <name>webcrawlLockManagerFactoryClassName</name>
            <value>eu.dnetlib.iis.common.lock.ZookeeperLockManagerFactory</value>
            <description>lock manager factory class name, to be used for synchronizing access to cache directory</description>
        </property>
        <property>
            <name>webcrawlConnectionTimeout</name>
            <value>60000</value>
            <description>connection timeout during page retrieval phase (expressed in milliseconds)</description>
        </property>
        <property>
            <name>webcrawlReadTimeout</name>
            <value>60000</value>
            <description>read timeout during page retrieval phase (expressed in milliseconds)</description>
        </property>
        <property>
            <name>webcrawlMaxPageContentLength</name>
            <value>500000</value>
            <description>maximum length (expressed in characters number) of page content</description>
        </property>
        <property>
            <name>webcrawlThrottleSleepTime</name>
            <value>10000</value>
            <description>sleep time between retries when crawling for web page sources (expressed in milliseconds)</description>
        </property>
        <property>
            <name>webcrawlRetriesCount</name>
            <value>10</value>
            <description>maximum number of retries when crawling for web page sources</description>
        </property>
        <property>
            <name>webcrawlNumberOfEmittedFiles</name>
            <value>1000</value>
            <description>number of files created by webcrawler module</description>
        </property>
        <property>
            <name>webcrawlNumberOfPartitionsForCrawling</name>
            <value>4</value>
            <description>number of partitions to be used by executors conducting webcrawl operations</description>
        </property>
        <property>
            <name>sparkDriverMemory</name>
            <description>memory for driver process</description>
        </property>
        <property>
            <name>sparkExecutorMemory</name>
            <description>memory for individual executor</description>
        </property>
        <property>
            <name>oozieActionShareLibForSpark2</name>
            <description>oozie action sharelib for spark 2.*</description>
        </property>
        <property>
            <name>spark2ExtraListeners</name>
            <value>com.cloudera.spark.lineage.NavigatorAppListener</value>
            <description>spark 2.* extra listeners classname</description>
        </property>
        <property>
            <name>spark2SqlQueryExecutionListeners</name>
            <value>com.cloudera.spark.lineage.NavigatorQueryListener</value>
            <description>spark 2.* sql query execution listeners classname</description>
        </property>
        <property>
            <name>spark2YarnHistoryServerAddress</name>
            <description>spark 2.* yarn history server address</description>
        </property>
        <property>
            <name>spark2EventLogDir</name>
            <description>spark 2.* event log dir location</description>
        </property>
        <property>
            <name>cacheRootDir</name>
            <description>webcrawling cache root directory</description>
        </property>
    </parameters>

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
            <property>
                <name>oozie.action.sharelib.for.spark</name>
                <value>${oozieActionShareLibForSpark2}</value>
            </property>
        </configuration>
    </global>

    <start to="generate-schema" />

    <action name="generate-schema">
        <java>
            <main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
            <arg>eu.dnetlib.iis.metadataextraction.schemas.DocumentText</arg>
            <arg>eu.dnetlib.iis.referenceextraction.softwareurl.schemas.DocumentToSoftwareUrl</arg>
            <arg>eu.dnetlib.iis.referenceextraction.softwareurl.schemas.DocumentToSoftwareUrlWithSource</arg>
            <arg>eu.dnetlib.iis.referenceextraction.softwareurl.schemas.DocumentToSoftwareUrlWithMeta</arg>
            <capture-output />
        </java>
        <ok to="mining" />
        <error to="fail" />
    </action>

    <action name="mining">
        <map-reduce>
            <prepare>
                <delete path="${nameNode}${workingDir}/referenceextraction_softwareurl_mining" />
            </prepare>
            <streaming>
                <!-- Here, we give the relative path to the script and pass it the parameters of the workflow node. The script is held in a directory having the same name as the workflow node. The parameters 
                    should be passed as **named** arguments. This convention of passing them as named arguments makes the code more readable/maintainable. -->
                <mapper>scripts/madis/mexec.py -f scripts/software.sql</mapper>
            </streaming>
            <configuration>
                <!-- # Standard settings for our framework -->
                <property>
                    <name>mapred.output.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONOutputFormat</value>
                </property>
                <property>
                    <name>mapred.input.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONInputFormat</value>
                </property>
                <!-- # Custom settings for this workflow node -->
                <!-- We do not use any reducers, so we set their number to 0 -->
                <property>
                    <name>mapreduce.job.reduces</name>
                    <value>0</value>
                </property>

                <!-- INPUT -->
                <property>
                    <name>mapreduce.input.fileinputformat.inputdir</name>
                    <value>${input_document_text}</value>
                </property>

                <property>
                    <name>input.schema.literal</name>
                    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
                </property>

                <!-- OUTPUT -->
                <property>
                    <name>mapreduce.output.fileoutputformat.outputdir</name>
                    <value>${workingDir}/referenceextraction_softwareurl_mining</value>
                </property>

                <property>
                    <name>output.schema.literal</name>
                    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.referenceextraction.softwareurl.schemas.DocumentToSoftwareUrl']}</value>
                </property>

                <!-- this one is requred due to the large amount of time taken by process storing plaintexts into the database -->
                <property>
                    <name>mapreduce.task.timeout</name>
                    <value>43200000</value>
                </property>
            </configuration>

        </map-reduce>
        <ok to="cached-webcrawl" />
        <error to="fail" />
    </action>

    <action name="cached-webcrawl">
        <spark xmlns="uri:oozie:spark-action:0.2">
            <master>yarn-cluster</master>
            <mode>cluster</mode>
            <name>referenceextraction_softwareurl_webcrawl</name>
            <class>eu.dnetlib.iis.wf.referenceextraction.softwareurl.CachedWebCrawlerJob</class>
            <jar>${oozieTopWfApplicationPath}/lib/iis-wf-referenceextraction-${projectVersion}.jar</jar>

            <spark-opts>
                --executor-memory=${sparkExecutorMemory}
                --executor-cores=1
                --driver-memory=${sparkDriverMemory}
                --conf spark.extraListeners=${spark2ExtraListeners}
                --conf spark.sql.queryExecutionListeners=${spark2SqlQueryExecutionListeners}
                --conf spark.yarn.historyServer.address=${spark2YarnHistoryServerAddress}
                --conf spark.eventLog.dir=${nameNode}${spark2EventLogDir}
            </spark-opts>

            <arg>-inputPath=${workingDir}/referenceextraction_softwareurl_mining</arg>
            <arg>-outputPath=${workingDir}/referenceextraction_softwareurl_webcrawl/out</arg>
            <arg>-outputFaultPath=${workingDir}/referenceextraction_softwareurl_webcrawl/fault</arg>
            <arg>-outputReportPath=${output_report_root_path}/${output_report_relative_path}</arg>
            <arg>-lockManagerFactoryClassName=${webcrawlLockManagerFactoryClassName}</arg>

            <arg>-contentRetrieverFactoryClassName=${webcrawlContentRetrieverFactoryClassName}</arg>
            <arg>-DconnectionTimeout=${webcrawlConnectionTimeout}</arg>
            <arg>-DreadTimeout=${webcrawlReadTimeout}</arg>
            <arg>-DmaxPageContentLength=${webcrawlMaxPageContentLength}</arg>
            <arg>-DthrottleSleepTime=${webcrawlThrottleSleepTime}</arg>
            <arg>-DretriesCount=${webcrawlRetriesCount}</arg>

            <arg>-numberOfEmittedFiles=${webcrawlNumberOfEmittedFiles}</arg>
            <arg>-numberOfPartitionsForCrawling=${webcrawlNumberOfPartitionsForCrawling}</arg>
            
            <arg>-cacheRootDir=${cacheRootDir}</arg>
        </spark>
        <ok to="postprocessing" />
        <error to="fail" />
    </action>

    <action name="postprocessing">
        <map-reduce>
            <prepare>
                <delete path="${nameNode}${output}" />
            </prepare>
            <streaming>
                <!-- Here, we give the relative path to the script and pass it the parameters of the workflow node. The script is held in a directory having the same name as the workflow node. The parameters 
                    should be passed as **named** arguments. This convention of passing them as named arguments makes the code more readable/maintainable. -->
                <mapper>scripts/madis/mexec.py -d origins.db -f scripts/softwarepost.sql</mapper>
            </streaming>
            <configuration>
                <!-- # Standard settings for our framework -->
                <property>
                    <name>mapred.output.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONOutputFormat</value>
                </property>
                <property>
                    <name>mapred.input.format.class</name>
                    <value>com.cloudera.science.avro.streaming.AvroAsJSONInputFormat</value>
                </property>
                <!-- # Custom settings for this workflow node -->
                <!-- We do not use any reducers, so we set their number to 0 -->
                <property>
                    <name>mapreduce.job.reduces</name>
                    <value>0</value>
                </property>

                <!-- INPUT -->
                <property>
                    <name>mapreduce.input.fileinputformat.inputdir</name>
                    <value>${workingDir}/referenceextraction_softwareurl_webcrawl/out</value>
                </property>

                <property>
                    <name>input.schema.literal</name>
                    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.referenceextraction.softwareurl.schemas.DocumentToSoftwareUrlWithSource']}</value>
                </property>

                <!-- OUTPUT -->
                <property>
                    <name>mapreduce.output.fileoutputformat.outputdir</name>
                    <value>${output}</value>
                </property>

                <property>
                    <name>output.schema.literal</name>
                    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.referenceextraction.softwareurl.schemas.DocumentToSoftwareUrlWithMeta']}</value>
                </property>

                <!-- this one is requred due to the large amount of time taken by process storing plaintexts into the database -->
                <property>
                    <name>mapreduce.task.timeout</name>
                    <value>43200000</value>
                </property>
            </configuration>
            <file>${input_softwareheritage_origins_db}#origins.db</file>

        </map-reduce>
        <ok to="end" />
        <error to="fail" />
    </action>

    <kill name="fail">
        <message>Unfortunately, the process failed -- error message:
            [${wf:errorMessage(wf:lastErrorNode())}]
        </message>
    </kill>

    <end name="end" />

</workflow-app>
