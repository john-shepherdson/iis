<workflow-app xmlns="uri:oozie:workflow:0.4" name="test-transformers_referenceextraction_project_filter">

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapred.job.queue.name</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
	<start to="producer" />
	<action name="producer">
		<java>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/producer" />
				<mkdir path="${nameNode}${workingDir}/producer" />
			</prepare>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.Producer</arg>
			<!-- Specification of the output ports -->
			<arg>-C{project,
				eu.dnetlib.iis.importer.schemas.Project,
				eu/dnetlib/iis/wf/referenceextraction/project/input_filter/test/data/project.json}
			</arg>
			<arg>-Oproject=${workingDir}/producer/project</arg>
		</java>
		<ok to="transformers_project_filter" />
		<error to="fail" />
	</action>

	<action name="transformers_project_filter">
		<sub-workflow>
			<app-path>${wf:appPath()}/transformers_project_filter</app-path>
			<configuration>
				<property>
					<name>jobTracker</name>
					<value>${jobTracker}</value>
				</property>
				<property>
					<name>nameNode</name>
					<value>${nameNode}</value>
				</property>
				<property>
					<name>queueName</name>
					<value>${queueName}</value>
				</property>
                <property>
                    <name>oozieLauncherQueueName</name>
                    <value>${oozieLauncherQueueName}</value>
                </property>
				<!-- Working directory of the subworkflow -->
				<property>
					<name>workingDir</name>
					<value>${workingDir}/transformers_project_filter/working_dir</value>
				</property>
				<property>
					<name>fundingclass_blacklist_regex</name>
					<value>^EC::H2020</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/producer/project</value>
				</property>
				<property>
					<name>output</name>
					<value>${workingDir}/transformers_project_filter/output</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="consumer" />
		<error to="fail" />
	</action>
	<action name="consumer">
		<java>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.TestingConsumer</arg>
			<!-- Specification of the input ports -->
			<arg>-C{output,
				eu.dnetlib.iis.importer.schemas.Project,
				eu/dnetlib/iis/wf/referenceextraction/project/input_filter/test/data/output.json}
			</arg>
			<arg>-Ioutput=${workingDir}/transformers_project_filter/output</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>
	<kill name="fail">
		<message>Unfortunately, the workflow failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]
		</message>
	</kill>
	<end name="end" />

</workflow-app>
