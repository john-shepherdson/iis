<?xml version="1.0"?>
<!-- Note that documentation placed in comments in this file uses the
"markdown" syntax (along with its way of dividing text into sections). -->
<workflow-app xmlns="uri:oozie:workflow:0.3" name="test-referenceextraction_dataset_main_sqlite_sampletest">
	<start to="document_text_producer" />

	<action name="document_text_producer">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/document_text_producer" />
				<mkdir path="${nameNode}${workingDir}/document_text_producer" />
			</prepare>
			<configuration>
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>
			</configuration>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.Producer</arg>
			<!-- Specification of the output ports -->
			<arg>-C{document_text, 
				eu.dnetlib.iis.metadataextraction.schemas.DocumentText,
				eu/dnetlib/iis/wf/referenceextraction/dataset/data/document_text.json}</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Odocument_text=${workingDir}/document_text_producer/document_text</arg>
		</java>
		<ok to="dataset_db_producer" />
		<error to="fail" />
	</action>

    <action name="dataset_db_producer">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/dataset_db_producer" />
				<mkdir path="${nameNode}${workingDir}/dataset_db_producer" />
			</prepare>
			<configuration>
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>
			</configuration>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.wf.referenceextraction.dataset.DatasetDBProducer</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Odataset_db=${workingDir}/dataset_db_producer/datasets.db</arg>
		</java>
		<ok to="referenceextraction_dataset" />
		<error to="fail" />
	</action>

    <action name="referenceextraction_dataset">
        <sub-workflow>
            <app-path>${wf:appPath()}/referenceextraction_dataset</app-path>
            <configuration>
                <property>
                    <name>jobTracker</name>
                    <value>${jobTracker}</value>
                </property>
                <property>
                    <name>nameNode</name>
                    <value>${nameNode}</value>
                </property>
                <property>
                    <name>queueName</name>
                    <value>${queueName}</value>
                </property>
                <!-- Working directory of the subworkflow -->
                <property>
                    <name>workingDir</name>
                    <value>${workingDir}/referenceextraction_dataset/working_dir</value>
                </property>
                <property>
                    <name>input_document_text</name>
                    <value>${workingDir}/document_text_producer/document_text</value>
                </property>
                <property>
                    <name>input_dataset_db</name>
                    <value>${workingDir}/dataset_db_producer/datasets.db</value>
                </property>
                <property>
                    <name>output_document_to_dataset</name>
                    <value>${workingDir}/referenceextraction_dataset/document_to_dataset</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="consumer"/>
        <error to="fail"/>
    </action>

	<action name="consumer">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<configuration>
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>
			</configuration>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.TestingConsumer</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-C{document_to_dataset,
				eu.dnetlib.iis.referenceextraction.dataset.schemas.DocumentToDataSet,
				eu/dnetlib/iis/wf/referenceextraction/dataset/data/document_to_dataset.json}</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Idocument_to_dataset=${workingDir}/referenceextraction_dataset/document_to_dataset</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>

    <kill name="fail">
        <message>Unfortunately, the process failed -- error message:
        			[${wf:errorMessage(wf:lastErrorNode())}]
        		</message>
    </kill>

    <end name="end"/>
</workflow-app>
