<workflow-app xmlns="uri:oozie:workflow:0.4" name="test-transformers_metadataextraction_skip_extracted_sampledataproducer">

	<global>
		<job-tracker>${jobTracker}</job-tracker>
		<name-node>${nameNode}</name-node>
		<configuration>
			<property>
				<name>mapred.job.queue.name</name>
				<value>${queueName}</value>
			</property>
			<property>
				<name>oozie.launcher.mapred.job.queue.name</name>
				<value>${oozieLauncherQueueName}</value>
			</property>
		</configuration>
	</global>


	<start to="producer" />
	<action name="producer">
		<java>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/producer" />
				<mkdir path="${nameNode}${workingDir}/producer" />
			</prepare>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.Producer</arg>
			<!-- Specification of the output ports -->
			<arg>-C{document_content_url,
				eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl,
				eu/dnetlib/iis/wf/transformers/metadataextraction/skip_extracted/sampledataproducer/data/input_document_content_url.json}
			</arg>
			<arg>-C{extracted_document_metadata,
				eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata,
				eu/dnetlib/iis/wf/transformers/metadataextraction/skip_extracted/sampledataproducer/data/input_extracted_document_metadata.json}
			</arg>
			<arg>-Odocument_content_url=${workingDir}/producer/document_content_url</arg>
			<arg>-Oextracted_document_metadata=${workingDir}/producer/extracted_document_metadata</arg>
		</java>
		<ok to="transformer" />
		<error to="fail" />
	</action>

	<action name="transformer">
		<sub-workflow>
			<app-path>${wf:appPath()}/transformer</app-path>
			<configuration>
				<property>
					<name>jobTracker</name>
					<value>${jobTracker}</value>
				</property>
				<property>
					<name>nameNode</name>
					<value>${nameNode}</value>
				</property>
				<property>
					<name>queueName</name>
					<value>${queueName}</value>
				</property>
				<property>
					<name>oozieLauncherQueueName</name>
					<value>${oozieLauncherQueueName}</value>
				</property>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/transformer/working_dir</value>
				</property>
				<property>
					<name>input_document_content</name>
					<value>${workingDir}/producer/document_content_url</value>
				</property>
				<property>
					<name>input_document_meta</name>
					<value>${workingDir}/producer/extracted_document_metadata</value>
				</property>
				<property>
					<name>output_document_content</name>
					<value>${workingDir}/transformer/output_document_content</value>
				</property>
				<property>
					<name>output_document_meta</name>
					<value>${workingDir}/transformer/output_document_meta</value>
				</property>
				<property>
					<name>mapred_map_child_java_opts</name>
					<value>-Xmx200m</value>
				</property>
				<property>
					<name>mapred_reduce_child_java_opts</name>
					<value>-Xmx200m</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="consumer_document_content" />
		<error to="fail" />
	</action>
	<action name="consumer_document_content">
		<java>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.TestingConsumer</arg>
			<arg>-C{document_content_url,
				eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl,
				eu/dnetlib/iis/wf/transformers/metadataextraction/skip_extracted/sampledataproducer/data/output_document_content_url.json}
			</arg>
			<arg>-Idocument_content_url=${workingDir}/transformer/output_document_content</arg>
		</java>
		<ok to="consumer_document_meta" />
		<error to="fail" />
	</action>

	<action name="consumer_document_meta">
		<java>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.TestingConsumer</arg>
			<arg>-C{document_content_url,
				eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata,
				eu/dnetlib/iis/wf/transformers/metadataextraction/skip_extracted/sampledataproducer/data/output_extracted_document_metadata.json}
			</arg>
			<arg>-Idocument_content_url=${workingDir}/transformer/output_document_meta</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>

	<kill name="fail">
		<message>Unfortunately, the workflow failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]
		</message>
	</kill>
	<end name="end" />
</workflow-app>
