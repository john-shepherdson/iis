<workflow-app xmlns="uri:oozie:workflow:0.2" name="test-transformers_metadataextraction_documenttext_sampledataproducer">
    <start to="producer"/>
    <action name="producer">
        <java>
            <job-tracker>${jobTracker}</job-tracker>
            <name-node>${nameNode}</name-node>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/producer" />
				<mkdir path="${nameNode}${workingDir}/producer" />
			</prepare>
            <configuration>
                <property>
                    <name>mapred.job.queue.name</name>
                    <value>${queueName}</value>
                </property>
            </configuration>
            <!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.Producer</arg>
			<!-- Specification of the output ports -->
            <arg>-C{extracted_metadata,
				eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata,
				eu/dnetlib/iis/wf/transformers/metadataextraction/documenttext/sampledataproducer/data/extr_metadata.json}</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
            <arg>-Oextracted_metadata=${workingDir}/producer/extr_metadata</arg>
        </java>
        <ok to="transformer_export_documentmetadata"/>
        <error to="fail"/>
    </action>
    <action name="transformer_export_documentmetadata">
        <sub-workflow>
            <app-path>${wf:appPath()}/transformer_metadataextraction_documenttext</app-path>
            <configuration>
                <property>
                    <name>jobTracker</name>
                    <value>${jobTracker}</value>
                </property>
                <property>
                    <name>nameNode</name>
                    <value>${nameNode}</value>
                </property>
                <property>
                    <name>queueName</name>
                    <value>${queueName}</value>
                </property>
                <!-- Working directory of the subworkflow -->
                <property>
                    <name>workingDir</name>
                    <value>${workingDir}/transformer_metadataextraction_documenttext/working_dir</value>
                </property>
                <!-- Input ports. -->
                <property>
                    <name>input</name>
                    <value>${workingDir}/producer/extr_metadata</value>
                </property>
                <!-- Output port bound to given path -->
                <property>
                    <name>output</name>
                    <value>${workingDir}/transformer_metadataextraction_documenttext/output</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="consumer"/>
        <error to="fail"/>
    </action>
    <action name="consumer">
		<java>
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<configuration>
				<property>
					<name>mapred.job.queue.name</name>
					<value>${queueName}</value>
				</property>
			</configuration>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.TestingConsumer</arg>
			<!-- Specification of the input ports -->
			<arg>-C{output,
				eu.dnetlib.iis.metadataextraction.schemas.DocumentText,
				eu/dnetlib/iis/wf/transformers/metadataextraction/documenttext/sampledataproducer/data/output_text.json}</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Ioutput=${workingDir}/transformer_metadataextraction_documenttext/output</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>    
    <kill name="fail">
		<message>Unfortunately, the workflow failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>
