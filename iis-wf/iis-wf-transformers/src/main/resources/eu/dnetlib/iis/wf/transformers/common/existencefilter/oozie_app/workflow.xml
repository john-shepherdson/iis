<workflow-app xmlns="uri:oozie:workflow:0.4" name="existencefilter">
    <parameters>
        <property>
            <name>input_data</name>
            <description>data to be filtered (needs to have id field)</description>
        </property>
        <property>
            <name>input_existent_id</name>
            <description>ids of documents existent in OA+</description>
        </property>
        <property>
            <name>output_filtered</name>
            <description>filtered data (i.e. output)</description>
        </property>
    </parameters>
    
    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
    <start to="generate-schema"/>
    
    <action name="generate-schema">
	    <java>
	        <main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
	        <arg>eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl</arg>
	        <arg>eu.dnetlib.iis.common.schemas.DocumentId</arg>
	        <capture-output />
	    </java>
	    <ok to="filter" />
	    <error to="fail" />
	</action>
	
    <action name="filter">
        <pig>
            <!-- The data generated by this node is deleted in this section -->
            <prepare>
                <delete path="${nameNode}${output_filtered}" />
            </prepare>
            <!-- Path to PIG script the workflow executes. -->
            <script>lib/scripts/filter.pig</script>
            <!-- Input ports. -->
            <param>input_data=${input_data}</param>
            <param>input_existent_id=${input_existent_id}</param>
            <!-- Output ports. -->
            <param>output_filtered=${output_filtered}</param>
            <!-- Input and output Avro schemas passed to the script must be given
                 as full URIs. -->
            <param>schema_data=${wf:actionData('generate-schema')['eu.dnetlib.iis.importer.auxiliary.schemas.DocumentContentUrl']}</param>
            <param>schema_input_existent_id=${wf:actionData('generate-schema')['eu.dnetlib.iis.common.schemas.DocumentId']}</param>
        </pig>
        <ok to="end"/>
        <error to="fail"/>
    </action>
    <kill name="fail">
        <message>Unfortunately, the workflow failed -- error message:
            [${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>
