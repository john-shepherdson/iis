<workflow-app xmlns="uri:oozie:workflow:0.4" name="test-metadataextraction_sampledataproducer">
	<parameters>
		<property>
			<name>pdfs_resource_dir</name>
			<value>/eu/dnetlib/iis/wf/metadataextraction/2014-A0-053.pdf,/eu/dnetlib/iis/wf/metadataextraction/pdf-example.pdf</value>
		</property>
		<property>
			<name>mapred_child_java_opts</name>
			<value>-Xmx512m</value>
		</property>
	</parameters>
	
    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>


    <start to="document_content_creator"/>
       
    <action name="document_content_creator">
		<java>
			<!-- The data generated by this node is deleted in this section -->
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/document_content_creator" />
				<mkdir path="${nameNode}${workingDir}/document_content_creator" />
			</prepare>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.wf.metadataextraction.ExamplePdfBasedDocumentContentGenerator</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Odoc_content=${workingDir}/document_content_creator/doc_content</arg>
			<!-- resource dir containing example PDF files -->
			<arg>-Ppdfs_resource_dir=${pdfs_resource_dir}</arg>
		</java>
		<ok to="metadata_extractor" />
		<error to="fail" />
	</action>
    <action name="metadata_extractor">
		<sub-workflow>
            <app-path>${wf:appPath()}/metadata_extractor</app-path>
            <propagate-configuration/>
            <configuration>
            	<property>
					<name>input</name>
					<value>${workingDir}/document_content_creator/doc_content</value>
				</property>
				<property>
					<name>output_root</name>
					<value>${workingDir}/metadata_extractor</value>
				</property>
                <property>
                    <name>output_report_root_path</name>
                    <value>${workingDir}/report</value>
                </property>
            </configuration>
        </sub-workflow>
		<ok to="consumer"/>
		<error to="fail" />
	</action>
    <action name="consumer">
		<java>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.TestingConsumer</arg>
			<!-- Specification of the input ports -->
			<arg>-C{extracted_metadata,
				eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata,
				eu/dnetlib/iis/wf/metadataextraction/sampledataproducer/data/extr_meta.json}</arg>
            <arg>-C{report,eu.dnetlib.iis.common.schemas.ReportEntry,
                eu/dnetlib/iis/wf/metadataextraction/sampledataproducer/data/report.json}</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Iextracted_metadata=${workingDir}/metadata_extractor/meta</arg>
			<arg>-Ireport=${workingDir}/report/import_metadataextraction</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>
    <kill name="fail">
        <message>Unfortunately, the process failed -- error message: [${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>