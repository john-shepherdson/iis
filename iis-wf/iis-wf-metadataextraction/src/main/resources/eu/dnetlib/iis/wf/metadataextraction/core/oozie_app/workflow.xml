<workflow-app xmlns="uri:oozie:workflow:0.4" name="metadataextraction_core">
	
	<parameters>
		<property>
			<name>input</name>
			<description>metadata extraction input directory</description>
		</property>
		<property>
			<name>output_root</name>
			<description>metadata extraction output directory</description>
		</property>
		<property>
			<name>output_name_meta</name>
			<value>meta</value>
			<description>metadata output subdirectory name</description>
		</property>
		<property>
			<name>output_name_fault</name>
			<value>fault</value>
			<description>Fault output subdirectory name.
			Fault#supplementaryData conveys data identified with the following keys:
			'url' - PDF document URL causing failure
			'processing_time' - time taken by cermine to process PDF document, expressed in milliseconds, 
				generated only when log_fault_processing_time_threshold_secs is exceeded
			</description>
		</property>
        <property>
            <name>output_report_root_path</name>
            <description>base directory for storing reports</description>
        </property>
        <property>
            <name>output_report_relative_path</name>
            <value>import_metadataextraction</value>
            <description>directory for storing report (relative to output_report_root_path)</description>
        </property>
		<property>
			<name>excluded_ids</name>
			<value>$UNDEFINED$</value>
			<description>excluded identifiers list</description>
		</property>
		<property>
			<name>log_fault_processing_time_threshold_secs</name>
			<value>300</value>
			<description>processing time threshold expressed in seconds. 
			When exceeded apropriate object will be written to fault datastore informing processing time threshold was exceeded.</description>
		</property>
        <property>
            <name>interrupt_processing_time_threshold_secs</name>
            <value>600</value>
            <description>processing time threshold expressed in seconds. 
            When exceeded processing will be interrupted for given record causing two records to be written: 
            1) empty metadata record
            2) fault record with TimeoutException</description>
        </property>
		<property>
			<name>mapred_child_java_opts</name>
			<value>-Xmx4096m</value>
			<description>java-opts, e.g. maximum heap size for a single JVM running MapReduce</description>
		</property>
	</parameters>
    
    
    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
    <start to="generate-schema" />

	<action name="generate-schema">
	    <java>
	        <main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
	        <arg>eu.dnetlib.iis.importer.schemas.DocumentContent</arg>
	        <arg>eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata</arg>
	        <arg>eu.dnetlib.iis.metadataextraction.schemas.DocumentText</arg>
	        <arg>eu.dnetlib.iis.audit.schemas.Fault</arg>
	        <capture-output />
	    </java>
	    <ok to="metadata_extractor" />
	    <error to="fail" />
	</action>
    
    <action name="metadata_extractor">
        <map-reduce>
 			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${output_root}" />
			</prepare>
            <configuration>
            	<property>
					<name>mapreduce.task.timeout</name>
					<value>3600000</value>
				</property>
            	<property>
					<name>mapreduce.job.inputformat.class</name>
					<value>org.apache.avro.mapreduce.AvroKeyInputFormat</value>
				</property>
            	<property>
					<name>mapreduce.map.output.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapreduce.map.output.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapreduce.job.output.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapreduce.job.output.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapreduce.job.output.key.comparator.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				<property>
					<name>io.serializations</name>
					<value>org.apache.hadoop.io.serializer.WritableSerialization,org.apache.hadoop.io.serializer.avro.AvroSpecificSerialization,org.apache.hadoop.io.serializer.avro.AvroReflectSerialization,org.apache.avro.hadoop.io.AvroSerialization
					</value>
				</property>
				<property>
					<name>mapreduce.job.output.group.comparator.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				<property>
					<name>rpc.engine.org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolPB
					</name>
					<value>org.apache.hadoop.ipc.ProtobufRpcEngine</value>
				</property>
                <!-- This is required for new api usage -->
                <property>
                    <name>mapred.mapper.new-api</name>
                    <value>true</value>
                </property>
                <property>
                    <name>mapred.reducer.new-api</name>
                    <value>true</value>
                </property>
            
                <!-- Standard stuff for our framework -->
                
                <property>
                    <name>mapred.child.java.opts</name>
                    <value>${mapred_child_java_opts}</value>
                </property>
			    <property>
					<name>avro.schema.input.key</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.importer.schemas.DocumentContent']}</value>
				</property>
                
                <property>
					<name>avro.mapreduce.multipleoutputs</name>
					<value>${output_name_meta} ${output_name_fault}</value>
				</property>
                <!-- ## Output classes for all output ports -->
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_meta}.format
					</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
                <property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_fault}.format
					</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
                <!-- ### Schema of multiple output ports. -->
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_meta}.keyschema</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata']}</value>
				</property>
				<property>
					<name>avro.mapreduce.multipleoutputs.namedOutput.${output_name_fault}.keyschema</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.audit.schemas.Fault']}</value>
				</property>

				<property>
                    <name>mapreduce.input.fileinputformat.inputdir</name>
                    <value>${input}</value>
                </property>
                <property>
                    <name>mapreduce.output.fileoutputformat.outputdir</name>
                    <value>${output_root}</value>
                </property>
                <property>
				    <name>output.meta</name>
				   <value>${output_name_meta}</value>
				</property>
				<property>
				    <name>output.fault</name>
				   <value>${output_name_fault}</value>
				</property>
				<property>
				    <name>excluded.ids</name>
				   <value>${excluded_ids}</value>
				</property>
                <property>
                    <name>interrupt.processing.time.threshold.secs</name>
                   <value>${interrupt_processing_time_threshold_secs}</value>
                </property>
				<property>
				    <name>log.fault.processing.time.threshold.secs</name>
				   <value>${log_fault_processing_time_threshold_secs}</value>
				</property>
                <property>
                    <name>mapreduce.job.map.class</name>
                    <value>eu.dnetlib.iis.wf.metadataextraction.MetadataExtractorMapper</value>
                </property>
                <property>
                    <name>mapreduce.job.reduces</name>
                    <value>0</value>
                </property>
                <property>
                    <name>oozie.action.external.stats.write</name>
                    <value>true</value>
                </property>
                <property>
                    <name>avro.mapreduce.multipleoutputs.counters</name>
                    <value>true</value>
                </property>
            </configuration>
        </map-reduce>
          <ok to="report"/>
        <error to="fail"/>
    </action>

    <action name="report">
        <java>
            <main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
            <arg>eu.dnetlib.iis.common.report.ReportGenerator</arg>
            <arg>-Preport.import.metadataExtraction.correct=${hadoop:counters('metadata_extractor')['eu.dnetlib.iis.common.javamapreduce.hack.AvroMultipleOutputs'][concat(output_name_meta,'/part')]}</arg>
            <arg>-Preport.import.metadataExtraction.fault=${hadoop:counters('metadata_extractor')['eu.dnetlib.iis.common.javamapreduce.hack.AvroMultipleOutputs'][concat(output_name_fault,'/part')]}</arg>
            <arg>-Oreport=${output_report_root_path}/${output_report_relative_path}</arg>
        </java>
        <ok to="end" />
        <error to="fail" />
    </action>

    <kill name="fail">
        <message>Unfortunately, the process failed -- error message: [${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>