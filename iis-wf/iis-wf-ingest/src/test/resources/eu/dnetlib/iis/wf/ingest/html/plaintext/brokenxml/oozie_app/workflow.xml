<workflow-app xmlns="uri:oozie:workflow:0.4" name="test-ingest_html_plaintext_brokenxml">

	<global>
		<job-tracker>${jobTracker}</job-tracker>
		<name-node>${nameNode}</name-node>
		<configuration>
			<property>
				<name>mapreduce.job.queuename</name>
				<value>${queueName}</value>
			</property>
			<property>
				<name>oozie.launcher.mapred.job.queue.name</name>
				<value>${oozieLauncherQueueName}</value>
			</property>
		</configuration>
	</global>

	<start to="producer" />
	<action name="producer">
		<java>
			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${workingDir}/producer" />
				<mkdir path="${nameNode}${workingDir}/producer" />
			</prepare>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.Producer</arg>
			<!-- Specification of the output ports -->
			<arg>-C{document_html,
				eu.dnetlib.iis.metadataextraction.schemas.DocumentText,
				eu/dnetlib/iis/wf/ingest/html/plaintext/data/html_document_text_broken.json}
			</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Odocument_html=${workingDir}/producer/document_html</arg>
		</java>
		<ok to="ingest_html_plaintext" />
		<error to="fail" />
	</action>
	<action name="ingest_html_plaintext">
		<sub-workflow>
			<app-path>${wf:appPath()}/ingest_html_plaintext</app-path>
			<propagate-configuration />
			<configuration>
				<!-- Working directory of the subworkflow -->
				<property>
					<name>workingDir</name>
					<value>${workingDir}/ingest_html_plaintext/working_dir</value>
				</property>
				<!-- Input ports. -->
				<property>
					<name>input</name>
					<value>${workingDir}/producer/document_html</value>
				</property>
				<!-- Output port bound to given path -->
				<property>
					<name>output</name>
					<value>${workingDir}/ingest_html_plaintext/document_plaintext</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="consumer" />
		<error to="fail" />
	</action>
	<action name="consumer">
		<java>
			<!-- This is simple wrapper for the Java code -->
			<main-class>eu.dnetlib.iis.common.java.ProcessWrapper</main-class>
			<!-- The business Java code that gets to be executed -->
			<arg>eu.dnetlib.iis.common.java.jsonworkflownodes.TestingConsumer</arg>
			<!-- Specification of the input ports -->
			<arg>-C{document_plaintext,
				eu.dnetlib.iis.metadataextraction.schemas.DocumentText,
				eu/dnetlib/iis/wf/ingest/html/plaintext/data/fulltext_document_text_broken.json}
			</arg>
			<!-- All input and output ports have to be bound to paths in HDFS -->
			<arg>-Idocument_plaintext=${workingDir}/ingest_html_plaintext/document_plaintext</arg>
		</java>
		<ok to="end" />
		<error to="fail" />
	</action>
	<kill name="fail">
		<message>Unfortunately, the workflow failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]
		</message>
	</kill>
	<end name="end" />
</workflow-app>