<workflow-app xmlns="uri:oozie:workflow:0.4" name="ingest_html_plaintext">
	
	<parameters>
		<property>
			<name>input</name>
			<description>input document text containing HTML file</description>
		</property>
		<property>
			<name>output</name>
			<description>output document plaintext</description>
		</property>

	</parameters>
    
    
    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
        </configuration>
    </global>
    
    
    <start to="generate-schema" />

	<action name="generate-schema">
	    <java>
	        <main-class>eu.dnetlib.iis.common.javamapreduce.hack.AvroSchemaGenerator</main-class>
			<arg>eu.dnetlib.iis.metadataextraction.schemas.DocumentText</arg>
			<arg>org.apache.avro.Schema.Type.NULL</arg>
	        <capture-output />
	    </java>
	    <ok to="ingest" />
	    <error to="fail" />
	</action>
	
	<action name="ingest">
        <map-reduce>
 			<!-- The data generated by this node is deleted in this section -->
			<prepare>
				<delete path="${nameNode}${output}" />
			</prepare>
            <configuration>
            	<property>
					<name>mapreduce.job.inputformat.class</name>
					<value>org.apache.avro.mapreduce.AvroKeyInputFormat</value>
				</property>
				<!-- The output format seems to be required, JSON is written when missing -->
				<property>
					<name>mapreduce.job.outputformat.class</name>
					<value>org.apache.avro.mapreduce.AvroKeyOutputFormat</value>
				</property>
            	<property>
					<name>mapreduce.map.output.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapreduce.map.output.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapreduce.job.output.key.class</name>
					<value>org.apache.avro.mapred.AvroKey</value>
				</property>
				<property>
					<name>mapreduce.job.output.value.class</name>
					<value>org.apache.avro.mapred.AvroValue</value>
				</property>
				<property>
					<name>mapreduce.job.output.key.comparator.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				<property>
					<name>io.serializations</name>
					<value>org.apache.hadoop.io.serializer.WritableSerialization,org.apache.hadoop.io.serializer.avro.AvroSpecificSerialization,org.apache.hadoop.io.serializer.avro.AvroReflectSerialization,org.apache.avro.hadoop.io.AvroSerialization
					</value>
				</property>
				<property>
					<name>mapreduce.job.output.group.comparator.class</name>
					<value>org.apache.avro.hadoop.io.AvroKeyComparator</value>
				</property>
				
				<property>
					<name>rpc.engine.org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolPB
					</name>
					<value>org.apache.hadoop.ipc.ProtobufRpcEngine</value>
				</property>
            
                <!-- This is required for new api usage -->
                <property>
                    <name>mapred.mapper.new-api</name>
                    <value>true</value>
                </property>
                <property>
                    <name>mapred.reducer.new-api</name>
                    <value>true</value>
                </property>
            
                <!-- Standard stuff for our framework -->

				<property>
					<name>avro.schema.input.key</name>
					<value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
				</property>
				
                <property>
                    <name>avro.serialization.key.reader.schema</name>
                    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
                </property>
                <property>
                    <name>avro.serialization.key.writer.schema</name>
                    <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
                </property>
                
				<property>
                    <name>avro.serialization.value.reader.schema</name>
                    <value>${wf:actionData('generate-schema')['org.apache.avro.Schema.Type.NULL']}</value>
                </property>
                <property>
                    <name>avro.serialization.value.writer.schema</name>
                    <value>${wf:actionData('generate-schema')['org.apache.avro.Schema.Type.NULL']}</value>
                </property>
				
				<property>
		            <name>avro.schema.output.key</name>
		            <value>${wf:actionData('generate-schema')['eu.dnetlib.iis.metadataextraction.schemas.DocumentText']}</value>
		        </property>
		        
				<property>
                    <name>mapreduce.input.fileinputformat.inputdir</name>
                    <value>${input}</value>
                </property>
                <property>
                    <name>mapreduce.output.fileoutputformat.outputdir</name>
                    <value>${output}</value>
                </property>
                <property>
                    <name>mapreduce.job.map.class</name>
                    <value>eu.dnetlib.iis.wf.ingest.html.HtmlToPlaintextIngester</value>
                </property>
                <property>
                    <name>mapreduce.job.reduces</name>
                    <value>0</value>
                </property>
            </configuration>
        </map-reduce>
          <ok to="end"/>
        <error to="fail"/>
    </action>
    
    <kill name="fail">
        <message>Unfortunately, the process failed -- error message: [${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>
    <end name="end"/>
</workflow-app>