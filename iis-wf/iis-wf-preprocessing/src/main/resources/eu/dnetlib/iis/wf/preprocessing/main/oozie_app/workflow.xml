<workflow-app xmlns="uri:oozie:workflow:0.4" name="preprocessing_main">
	<parameters>
		<property>
			<name>remove_sideproducts</name>
			<value>true</value>
			<description>flag indicating inference side products will be erased</description>
		</property>
		<!-- import concepts related -->
		<property>
			<name>import_islookup_service_location</name>
			<description>IS Lookup service location</description>
		</property>
		<property>
			<name>import_project_concepts_context_ids_csv</name>
			<value>fet-fp7,fet-h2020</value>
			<description>comma separated list of concepts context identifiers to
				be picked by ISLookup
			</description>
		</property>
		<!-- import project related -->
		<property>
			<name>import_database_service_location</name>
			<description>Database service (not WSDL) location URL</description>
		</property>
		<property>
			<name>import_database_dbname</name>
			<value>dnet_openaireplus_node0_t</value>
			<description>database name</description>
		</property>
		<!-- import datacite related, export datacite & wos related -->
		<property>
			<name>import_mdstore_service_location</name>
			<description>MDStore service (not WSDL) location URL</description>
		</property>
		<property>
			<name>import_dataset_mdstore_ids_csv</name>
			<description>dataset MDStore identifier</description>
		</property>
		<property>
			<name>import_wos_mdstore_id</name>
			<description>WoS MDStore identifier</description>
		</property>
		<!-- import content related -->
		<!-- currently disabled, input_document_content property is handled as input holding DocumentContent datastore -->
		<property>
			<name>import_content_object_store_location</name>
			<value>$UNDEFINED$</value>
			<description>object store service location required for content retrieval</description>
		</property>
		<property>
			<name>import_content_wos_plaintext_objectstores_csv</name>
			<value>$UNDEFINED$</value>
			<description>CSV list of objectstore ids to be approved during WoS
				plaintext import.
			</description>
		</property>
		<property>
			<name>import_content_datacite_objectstores_csv</name>
			<value>$UNDEFINED$</value>
			<description>CSV list of objectstore ids to be approved during
				datacite import.
			</description>
		</property>
		<!-- import content mime types -->
		<property>
			<name>import_content_mimetypes_pdf</name>
			<value>pdf,application/pdf</value>
			<description>pdf mime types</description>
		</property>
		<property>
			<name>import_content_mimetypes_text</name>
			<value>text,text/plain</value>
			<description>text mime types</description>
		</property>
		<property>
			<name>import_content_mimetypes_html</name>
			<value>text/html</value>
			<description>html mime types</description>
		</property>
		<property>
			<name>import_content_mimetypes_xml_pmc</name>
			<value>xml</value>
			<description>xml pmc types</description>
		</property>
		<property>
			<name>import_content_mimetypes_wos</name>
			<value>file::WoS</value>
			<description>WoS mime types</description>
		</property>
		<!-- import timeouts related -->
		<property>
			<name>import_resultset_client_read_timeout</name>
			<value>60000</value>
			<description>resultset client read timeout (expressed in milliseconds)</description>
		</property>
		<property>
			<name>import_content_connection_timeout</name>
			<value>60000</value>
			<description>import content connection timeout (expressed in milliseconds)</description>
		</property>
		<property>
			<name>import_content_read_timeout</name>
			<value>60000</value>
			<description>import content read timeout (expressed in milliseconds)</description>
		</property>
		<property>
			<name>text_xml_max_file_size_mb</name>
			<value>2</value>
			<description>maximum allowed xml or text file size in Megabytes</description>
		</property>
		<!-- metadata extraction related -->
		<property>
			<name>metadataextraction_excluded_checksums</name>
			<value>$UNDEFINED$</value>
			<description>list of content checksums excluded from
				metadataextraction processing
			</description>
		</property>
		<property>
			<name>pdf_max_file_size_mb</name>
			<value>500</value>
			<description>maximum allowed pdf file size in Megabytes</description>
		</property>
		<property>
			<name>metadataextraction_default_cache_location</name>
			<value>/cache/metadataextraction</value>
			<description>metadata extraction cache location, path pointing to
				root cache directory holding meta.json file
			</description>
		</property>
		<property>
			<name>referenceextraction_project_fundingclass_blacklist_regex</name>
			<value>a^</value>
			<description>regexp matching funding class, describes projects which
				should be ignored by reference extraction algorithm.
				Set to 'a^' by default to guarantee nothing will be matched.
			</description>
		</property>
		<!-- export related -->
		<property>
			<name>active_export_to_actionmanager</name>
			<value>true</value>
			<description>flag indicating export to action manager should be
				performed
			</description>
		</property>
		<property>
			<name>active_export_to_json</name>
			<value>false</value>
			<description>flag indicating json export should be performed</description>
		</property>
		<!-- action set id properties -->
		<property>
			<name>export_action_set_id</name>
			<value>$UNDEFINED$</value>
			<description>action-set identifier of exported data</description>
		</property>
		<property>
			<name>export_action_set_id_document_referencedProjects</name>
			<value>$UNDEFINED$</value>
			<description>document_referencedProjects action-set identifier of
				exported data
			</description>
		</property>
		<property>
			<name>export_action_set_id_document_referencedDatasets</name>
			<value>$UNDEFINED$</value>
			<description>document_referencedDatasets action-set identifier of
				exported data
			</description>
		</property>
		<property>
			<name>export_action_set_id_entity_wos</name>
			<description>action-set identifier of exported data containing wos
				entities
			</description>
		</property>
		<property>
			<name>export_action_set_id_entity_dataset</name>
			<description>action-set identifier of exported data containing
				dataset entities
			</description>
		</property>
		<!-- trust level threshold section -->
		<property>
			<name>export_trust_level_threshold</name>
			<value>$UNDEFINED$</value>
			<description>default trust level threshold of exported data</description>
		</property>
		<property>
			<name>export_trust_level_threshold_document_referencedProjects</name>
			<value>$UNDEFINED$</value>
			<description>document_referencedProjects trust level threshold</description>
		</property>
		<property>
			<name>export_trust_level_threshold_document_referencedDatasets</name>
			<value>$UNDEFINED$</value>
			<description>document_referencedDatasets trust level threshold</description>
		</property>
		<property>
			<name>output_remote_location</name>
			<description>remote cluster output location where inference	output dump should be distcped as sequence files</description>
		</property>
		<!-- -->
		<!-- working directory related -->
		<property>
			<name>execution_environment</name>
			<value>preprocessing</value>
			<description>execution environment used for workingDir creation</description>
		</property>
		<property>
			<name>workingDir</name>
			<value>/user/${user.name}/iis/working_dirs/${execution_environment}</value>
			<description>working directory</description>
		</property>
	</parameters>

	<global>
		<job-tracker>${jobTracker}</job-tracker>
		<name-node>${nameNode}</name-node>
		<configuration>
			<property>
				<name>mapreduce.job.queuename</name>
				<value>${queueName}</value>
			</property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
		</configuration>
	</global>

	<start to="init-workingDir" />

	<action name="init-workingDir">
		<fs>
			<delete path="${nameNode}${workingDir}" />
			<mkdir path="${nameNode}${workingDir}" />
		</fs>
		<ok to="copy-version" />
		<error to="fail" />
	</action>

	<action name="copy-version">
		<distcp xmlns="uri:oozie:distcp-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<arg>${wf:appPath()}/version.properties</arg>
			<arg>${nameNode}${workingDir}</arg>
		</distcp>
		<ok to="import" />
		<error to="fail" />
	</action>

	<action name="import">
		<sub-workflow>
			<app-path>${wf:appPath()}/preprocessing_import</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/preprocessing_import/working_dir</value>
				</property>
				<!-- import project related -->
				<property>
					<name>database_service_location</name>
					<value>${import_database_service_location}</value>
				</property>
				<property>
					<name>database_dbname</name>
					<value>${import_database_dbname}</value>
				</property>
				<!-- project concept related -->
				<property>
					<name>islookup_service_location</name>
					<value>${import_islookup_service_location}</value>
				</property>
				<property>
					<name>project_concepts_context_ids_csv</name>
					<value>${import_project_concepts_context_ids_csv}</value>
				</property>
				<!-- import datacite related -->
				<property>
					<name>mdstore_service_location</name>
					<value>${import_mdstore_service_location}</value>
				</property>
				<property>
					<name>dataset_mdstore_ids_csv</name>
					<value>${import_dataset_mdstore_ids_csv}</value>
				</property>
				<!-- import content related -->
				<property>
					<name>objectstore_service_location</name>
					<value>${import_content_object_store_location}</value>
				</property>
				<property>
					<name>approved_objectstores_csv</name>
					<value>${import_content_datacite_objectstores_csv}</value>
				</property>
				<property>
					<name>wos_plaintext_objectstores_csv</name>
					<value>${import_content_wos_plaintext_objectstores_csv}</value>
				</property>
				<property>
					<name>mimetypes_pdf</name>
					<value>${import_content_mimetypes_pdf}</value>
				</property>
				<property>
					<name>mimetypes_text</name>
					<value>${import_content_mimetypes_text}</value>
				</property>
				<property>
					<name>mimetypes_html</name>
					<value>${import_content_mimetypes_html}</value>
				</property>
				<property>
					<name>mimetypes_xml_pmc</name>
					<value>${import_content_mimetypes_xml_pmc}</value>
				</property>
				<property>
					<name>mimetypes_wos</name>
					<value>${import_content_mimetypes_wos}</value>
				</property>
				<!-- import timeouts related -->
				<property>
					<name>resultset_client_read_timeout</name>
					<value>${import_resultset_client_read_timeout}</value>
				</property>
				<property>
					<name>content_connection_timeout</name>
					<value>${import_content_connection_timeout}</value>
				</property>
				<property>
					<name>content_read_timeout</name>
					<value>${import_content_read_timeout}</value>
				</property>
				<!-- metadata extraction related are autmatically propagated -->
				<!-- output parameters -->
				<property>
					<name>output_project</name>
					<value>${workingDir}/preprocessing_import/project</value>
				</property>
				<property>
					<name>output_dataset</name>
					<value>${workingDir}/preprocessing_import/dataset</value>
				</property>
				<property>
					<name>output_dataset_to_mdstore</name>
					<value>${workingDir}/preprocessing_import/dataset_to_mdstore</value>
				</property>
				<property>
					<name>output_document_text</name>
					<value>${workingDir}/preprocessing_import/document-text</value>
				</property>
				<property>
					<name>output_wos_text</name>
					<value>${workingDir}/preprocessing_import/wos-text</value>
				</property>
				<property>
					<name>output_project_concept</name>
					<value>${workingDir}/preprocessing_import/project-concept</value>
				</property>
				<property>
					<name>output_faults</name>
					<value>${workingDir}/preprocessing_import/faults</value>
				</property>
                <property>
                    <name>output_report_root_path</name>
                    <value>${workingDir}/report</value>
                </property>
			</configuration>
		</sub-workflow>
		<ok to="referenceextraction_forking" />
		<error to="fail" />
	</action>

	<fork name="referenceextraction_forking">
		<path start="referenceextraction_dataset" />
		<path start="ingest_webcrawl_fundings" />
	</fork>

	<action name="referenceextraction_dataset">
		<sub-workflow>
			<app-path>${wf:appPath()}/referenceextraction_dataset</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/referenceextraction_dataset/working_dir</value>
				</property>
				<property>
					<name>input_document_text</name>
					<value>${workingDir}/preprocessing_import/document-text</value>
				</property>
				<property>
					<name>input_dataset</name>
					<value>${workingDir}/preprocessing_import/dataset</value>
				</property>
				<property>
					<name>output_document_to_dataset</name>
					<value>${workingDir}/referenceextraction_dataset/document_datasets</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="referenceextraction_joining" />
		<error to="fail" />
	</action>

	<action name="ingest_webcrawl_fundings">
		<sub-workflow>
			<app-path>${wf:appPath()}/ingest_webcrawl_fundings</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/ingest_webcrawl_fundings/working_dir</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/preprocessing_import/wos-text</value>
				</property>
				<property>
					<name>output</name>
					<value>${workingDir}/ingest_webcrawl_fundings/output</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="transformers_project_filter" />
		<error to="fail" />
	</action>

	<action name="transformers_project_filter">
		<sub-workflow>
			<app-path>${wf:appPath()}/transformers_project_filter</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/transformers_project_filter/working_dir</value>
				</property>
				<property>
					<name>fundingclass_blacklist_regex</name>
					<value>${referenceextraction_project_fundingclass_blacklist_regex}</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/preprocessing_import/project</value>
				</property>
				<property>
					<name>output</name>
					<value>${workingDir}/transformers_project_filter/output</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="referenceextraction_project" />
		<error to="fail" />
	</action>

	<action name="referenceextraction_project">
		<sub-workflow>
			<app-path>${wf:appPath()}/referenceextraction_project</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/referenceextraction_project/working_dir</value>
				</property>
				<property>
					<name>input_document_text</name>
					<value>${workingDir}/ingest_webcrawl_fundings/output</value>
				</property>
				<property>
					<name>input_project</name>
					<value>${workingDir}/transformers_project_filter/output</value>
				</property>
				<property>
					<name>output_document_to_project</name>
					<value>${workingDir}/referenceextraction_project/document_projects</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="transformers_project_toconcept" />
		<error to="fail" />
	</action>

	<action name="transformers_project_toconcept">
		<sub-workflow>
			<app-path>${wf:appPath()}/transformers_project_toconcept</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/transformers_project_toconcept/working_dir</value>
				</property>
				<property>
					<name>input_document_to_project</name>
					<value>${workingDir}/referenceextraction_project/document_projects</value>
				</property>
				<property>
					<name>input_project</name>
					<value>${workingDir}/preprocessing_import/project</value>
				</property>
				<property>
					<name>input_concept</name>
					<value>${workingDir}/preprocessing_import/project-concept</value>
				</property>
				<property>
					<name>output</name>
					<value>${workingDir}/transformers_project_toconcept/out</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="transformers_concept_to_researchinitiatives" />
		<error to="fail" />
	</action>

	<action name="transformers_concept_to_researchinitiatives">
		<sub-workflow>
			<app-path>${wf:appPath()}/transformers_export_researchinitiatives</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/transformers_concept_to_researchinitiatives/working_dir</value>
				</property>
				<property>
					<name>input_document_to_research_initiative</name>
					<value>${workingDir}/transformers_project_toconcept/out</value>
				</property>
				<property>
					<name>output_document_to_research_initiatives</name>
					<value>${workingDir}/transformers_concept_to_researchinitiatives/out</value>
				</property>
				<property>
                    <name>output_report_relative_path</name>
                    <value>docs_with_at_least_one_concept</value>
                </property>
                <property>
                    <name>output_report_record_written_counter_name</name>
                    <value>export.referenceExtraction.docsWithAtLeastOneConcept</value>
                </property>
			</configuration>
		</sub-workflow>
		<ok to="referenceextraction_joining" />
		<error to="fail" />
	</action>

	<join name="referenceextraction_joining" to="decision-export-to-hbase" />

	<decision name="decision-export-to-hbase">
		<switch>
			<case to="export-to-actionmanager">${active_export_to_actionmanager eq "true"}</case>
			<default to="decision-export-to-json" />
		</switch>
	</decision>

	<action name="export-to-actionmanager">
		<sub-workflow>
			<app-path>${wf:appPath()}/preprocessing_export</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/preprocessing_export/working_dir</value>
				</property>
				<!-- input ports -->
				<property>
					<name>input_document_to_project</name>
					<value>${workingDir}/referenceextraction_project/document_projects</value>
				</property>
				<property>
					<name>input_document_to_project_concepts</name>
					<value>${workingDir}/transformers_concept_to_researchinitiatives/out</value>
				</property>
				<property>
					<name>input_document_to_dataset</name>
					<value>${workingDir}/referenceextraction_dataset/document_datasets</value>
				</property>
				<property>
					<name>input_document_to_mdstore</name>
					<value>${workingDir}/preprocessing_import/dataset_to_mdstore</value>
				</property>
				<!-- entities exporting modes -->
				<property>
					<name>mdstore_service_location</name>
					<value>${import_mdstore_service_location}</value>
				</property>
				<property>
					<name>wos_mdstore_id</name>
					<value>${import_wos_mdstore_id}</value>
				</property>
				<!-- action set id properties -->
				<property>
					<name>action_set_id</name>
					<value>${export_action_set_id}</value>
				</property>
				<property>
					<name>action_set_id_document_referencedProjects</name>
					<value>${export_action_set_id_document_referencedProjects}</value>
				</property>
				<property>
					<name>action_set_id_document_referencedDatasets</name>
					<value>${export_action_set_id_document_referencedDatasets}</value>
				</property>
				<property>
					<name>action_set_id_entity_wos</name>
					<value>${export_action_set_id_entity_wos}</value>
				</property>
				<property>
					<name>action_set_id_entity_dataset</name>
					<value>${export_action_set_id_entity_dataset}</value>
				</property>
				<property>
					<name>trust_level_threshold</name>
					<value>${export_trust_level_threshold}</value>
				</property>
				<property>
					<name>trust_level_threshold_document_referencedProjects</name>
					<value>${export_trust_level_threshold_document_referencedProjects}</value>
				</property>
				<property>
					<name>trust_level_threshold_document_referencedDatasets</name>
					<value>${export_trust_level_threshold_document_referencedDatasets}</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="decision-export-to-json" />
		<error to="fail" />
	</action>

	<decision name="decision-export-to-json">
		<switch>
			<case to="export-to-json">${active_export_to_json eq "true"}</case>
			<default to="end" />
		</switch>
	</decision>

	<action name="export-to-json">
		<sub-workflow>
			<app-path>${wf:appPath()}/preprocessing_export_to_json</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>input_document_to_project</name>
					<value>${workingDir}/referenceextraction_project/document_projects</value>
				</property>
				<property>
					<name>input_document_to_project_concepts</name>
					<value>${workingDir}/transformers_concept_to_researchinitiatives/out</value>
				</property>
				<property>
					<name>input_document_to_dataset</name>
					<value>${workingDir}/referenceextraction_dataset/document_datasets</value>
				</property>
				<property>
					<name>output_root</name>
					<value>${workingDir}/exported_as_json</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="build-report" />
		<error to="fail" />
	</action>

    <action name="build-report">
        <sub-workflow>
            <app-path>${wf:appPath()}/preprocessing_report</app-path>
            <propagate-configuration />
            <configuration>
                <property>
                    <name>input_partial_reports</name>
                    <value>${workingDir}/report</value>
                </property>
                <property>
                    <name>output_report</name>
                    <value>${workingDir}/report/report.json</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="end" />
        <error to="fail" />
    </action>

	<kill name="fail">
		<message>Unfortunately, the process failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]</message>
	</kill>
	<end name="end" />
</workflow-app>
