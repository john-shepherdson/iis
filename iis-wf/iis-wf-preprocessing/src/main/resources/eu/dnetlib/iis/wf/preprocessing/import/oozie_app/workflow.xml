<workflow-app xmlns="uri:oozie:workflow:0.4" name="preprocessing_import">
	<parameters>
		<property>
			<name>remove_sideproducts</name>
			<value>true</value>
			<description>flag indicating inference side products will be erased</description>
		</property>
		<!-- import concepts related -->
		<property>
			<name>islookup_service_location</name>
			<description>IS Lookup service location</description>
		</property>
		<property>
			<name>project_concepts_context_ids_csv</name>
			<description>comma separated list of concepts context identifiers to be picked by ISLookup</description>
		</property>
		<!-- import project related -->
		<property>
			<name>database_service_location</name>
			<value>$UNDEFINED$</value>
			<description>Database service (not WSDL) location URL</description>
		</property>
		<property>
			<name>database_dbname</name>
			<value>dnet_openaireplus_node6_t</value>
			<description>database name</description>
		</property>
		<!-- import datacite related -->
		<property>
			<name>mdstore_service_location</name>
			<value>$UNDEFINED$</value>
			<description>MDStore service (not WSDL) location URL</description>
		</property>
		<property>
			<name>dataset_mdstore_ids_csv</name>
			<value>$UNDEFINED$</value>
			<description>Dataset MDStore identifier</description>
		</property>
		<!-- import content related -->
		<property>
			<name>objectstore_service_location</name>
			<description>object store service location required for content retrieval</description>
		</property>
		<property>
			<name>approved_objectstores_csv</name>
			<value>$UNDEFINED$</value>
			<description>CSV list of object stores identifiers to be processed</description>
		</property>
		<property>
			<name>wos_plaintext_objectstores_csv</name>
			<value>$UNDEFINED$</value>
			<description>CSV list of plaintext WoS object stores identifiers to be processed</description>
		</property>
		<property>
			<name>mimetypes_pdf</name>
			<description>pdf mime types</description>
		</property>
		<property>
			<name>mimetypes_text</name>
			<description>text mime types</description>
		</property>
		<property>
			<name>mimetypes_html</name>
			<description>html mime types</description>
		</property>
		<property>
			<name>mimetypes_xml_pmc</name>
			<description>xml pmc types</description>
		</property>
		<property>
			<name>mimetypes_wos</name>
			<description>WoS text mime types</description>
		</property>
		<!-- import timeouts related -->
		<property>
			<name>resultset_client_read_timeout</name>
			<value>60000</value>
			<description>resultset client read timeout</description>
		</property>
		<property>
			<name>content_connection_timeout</name>
			<value>60000</value>
			<description>import content connection timeout</description>
		</property>
		<property>
			<name>content_read_timeout</name>
			<value>60000</value>
			<description>import content read timeout</description>
		</property>
		<property>
			<name>text_xml_max_file_size_mb</name>
			<value>$UNDEFINED$</value>
			<description>maximum allowed xml or text file size in Megabytes</description>
		</property>
		<!-- metadata extraction related -->
		<property>
			<name>metadataextraction_excluded_checksums</name>
			<value>$UNDEFINED$</value>
			<description>list of content checksums excluded from metadataextraction processing</description>
		</property>
		<property>
			<name>pdf_max_file_size_mb</name>
			<value>$UNDEFINED$</value>
			<description>maximum allowed pdf file size in Megabytes</description>
		</property>
		<property>
			<name>metadataextraction_default_cache_location</name>
			<description>metadata extraction HDFS cache location</description>
		</property>
		<!-- output parameters -->
		<property>
			<name>output_project</name>
			<description>project importer output root directory</description>
		</property>
		<property>
			<name>output_dataset</name>
			<description>dataset importer output directory holding dataset metadata, required when ${active_import_dataset}=true</description>
		</property>
		<property>
			<name>output_dataset_to_mdstore</name>
			<description>dataset importer output directory holding dataset to mdstore mappings, required when ${active_import_dataset}=true</description>
		</property>
		<property>
			<name>output_document_text</name>
			<description>text import output directory. merged from three different sources</description>
		</property>
		<property>
			<name>output_wos_text</name>
			<description>WoS text import output directory</description>
		</property>
		<property>
			<name>output_project_concept</name>
			<description>project concepts output directory</description>
		</property>
		<property>
			<name>output_faults</name>
			<description>processing faults output directory</description>
		</property>
	</parameters>

	<global>
		<job-tracker>${jobTracker}</job-tracker>
		<name-node>${nameNode}</name-node>
		<configuration>
			<property>
				<name>mapred.job.queue.name</name>
				<value>${queueName}</value>
			</property>
		</configuration>
	</global>

	<start to="import_forking" />

	<fork name="import_forking">
		<path start="import_dataset" />
		<path start="import_concept" />
		<path start="import_project" />
		<path start="wos_url_import" />
	</fork>

	<!-- start of common import part -->
	<action name="import_dataset">
		<sub-workflow>
			<app-path>${wf:appPath()}/import_dataset</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/import_dataset/working_dir</value>
				</property>
				<property>
					<name>mdstore_ids_csv</name>
					<value>${dataset_mdstore_ids_csv}</value>
				</property>
				<!-- all the other properties are autmatically propagated -->
			</configuration>
		</sub-workflow>
		<ok to="import_joining" />
		<error to="fail" />
	</action>

	<action name="import_concept">
		<sub-workflow>
			<app-path>${wf:appPath()}/import_concept</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/import_concept/working_dir</value>
				</property>
				<property>
					<name>islookup_service_location</name>
					<value>${islookup_service_location}</value>
				</property>
				<property>
					<name>context_ids_csv</name>
					<value>${project_concepts_context_ids_csv}</value>
				</property>
				<property>
					<name>output</name>
					<value>${output_project_concept}</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="import_joining" />
		<error to="fail" />
	</action>

	<action name="import_project">
		<sub-workflow>
			<app-path>${wf:appPath()}/import_project</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/import_project/working_dir</value>
				</property>
				<property>
					<name>output</name>
					<value>${output_project}</value>
				</property>
				<!-- all the other properties are autmatically propagated -->
			</configuration>
		</sub-workflow>
		<ok to="import_content_url" />
		<error to="fail" />
	</action>

	<action name="import_content_url">
		<sub-workflow>
			<app-path>${wf:appPath()}/import_content_url</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/import_content_url/working_dir</value>
				</property>
				<property>
					<name>input_id</name>
					<value>$UNDEFINED$</value>
				</property>
				<property>
					<name>input_id_mapping</name>
					<value>$UNDEFINED$</value>
				</property>
				<property>
					<name>output_root</name>
					<value>${workingDir}/import_content_url/imported</value>
				</property>
				<property>
					<name>output_name_pdf</name>
					<value>pdf</value>
				</property>
				<property>
					<name>output_name_text</name>
					<value>text</value>
				</property>
				<property>
					<name>output_name_html</name>
					<value>html</value>
				</property>
				<property>
					<name>output_name_xml_pmc</name>
					<value>xmlpmc</value>
				</property>
				<property>
					<name>output_name_wos</name>
					<value>wos</value>
				</property>
				<!-- all the other properties are autmatically propagated -->
			</configuration>
		</sub-workflow>
		<ok to="import_urlbased_forking" />
		<error to="fail" />
	</action>

	<fork name="import_urlbased_forking">
		<path start="import_plaintext" />
		<path start="import_plaintext_pmc" />
		<path start="import_html" />
		<path start="metadata_extractor_cached" />
	</fork>

	<action name="import_plaintext">
		<sub-workflow>
			<app-path>${wf:appPath()}/import_plaintext</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/import_plaintext/working_dir</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/import_content_url/imported/text</value>
				</property>
				<property>
					<name>max_file_size_mb</name>
					<value>${text_xml_max_file_size_mb}</value>
				</property>
				<property>
					<name>output</name>
					<value>${workingDir}/import_plaintext/imported</value>
				</property>
				<!-- all the other properties are autmatically propagated -->
			</configuration>
		</sub-workflow>
		<ok to="import_urlbased_joining" />
		<error to="fail" />
	</action>

	<action name="import_plaintext_pmc">
		<sub-workflow>
			<app-path>${wf:appPath()}/import_plaintext</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/import_plaintext_pmc/working_dir</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/import_content_url/imported/xmlpmc</value>
				</property>
				<property>
					<name>max_file_size_mb</name>
					<value>${text_xml_max_file_size_mb}</value>
				</property>
				<property>
					<name>output</name>
					<value>${workingDir}/import_plaintext_pmc/imported</value>
				</property>
				<!-- all the other properties are autmatically propagated -->
			</configuration>
		</sub-workflow>
		<ok to="ingest_pmc_metadata_with_text" />
		<error to="fail" />
	</action>

	<action name="ingest_pmc_metadata_with_text">
		<sub-workflow>
			<app-path>${wf:appPath()}/ingest_pmc_metadata</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/ingest_pmc_metadata/working_dir</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/import_plaintext_pmc/imported</value>
				</property>
				<property>
					<name>output_root</name>
					<value>${workingDir}/ingest_pmc_metadata/out</value>
				</property>
				<property>
					<name>output_name_meta</name>
					<value>meta</value>
				</property>
				<property>
					<name>output_name_fault</name>
					<value>fault</value>
				</property>
				<property>
					<name>ingest_metadata</name>
					<value>false</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="transformers_ingest_pmc_metadata" />
		<error to="fail" />
	</action>

	<action name="transformers_ingest_pmc_metadata">
		<sub-workflow>
			<app-path>${wf:appPath()}/transformers_ingest_pmc_metadata</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/transformers_ingest_pmc_metadata/working_dir</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/ingest_pmc_metadata/out/meta</value>
				</property>
				<property>
					<name>output</name>
					<value>${workingDir}/transformers_ingest_pmc_metadata/out</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="import_urlbased_joining" />
		<error to="fail" />
	</action>

	<!-- html import and plaintext ingestion section -->
	<action name="import_html">
		<sub-workflow>
			<app-path>${wf:appPath()}/import_plaintext</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/import_html/working_dir</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/import_content_url/imported/html</value>
				</property>
				<property>
					<name>max_file_size_mb</name>
					<value>${text_xml_max_file_size_mb}</value>
				</property>
				<property>
					<name>output</name>
					<value>${workingDir}/import_html/imported</value>
				</property>
				<!-- all the other properties are autmatically propagated -->
			</configuration>
		</sub-workflow>
		<ok to="ingest_html_plaintext" />
		<error to="fail" />
	</action>

	<action name="ingest_html_plaintext">
		<sub-workflow>
			<app-path>${wf:appPath()}/ingest_html_plaintext</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/ingest_html_plaintext/working_dir</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/import_html/imported</value>
				</property>
				<property>
					<name>output</name>
					<value>${workingDir}/ingest_html_plaintext/imported</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="import_urlbased_joining" />
		<error to="fail" />
	</action>

	<action name="metadata_extractor_cached">
		<sub-workflow>
			<app-path>${wf:appPath()}/metadataextraction_cached</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/metadata_extractor/working_dir</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/import_content_url/imported/pdf</value>
				</property>
				<property>
					<name>excluded_ids</name>
					<value>${metadataextraction_excluded_checksums}</value>
				</property>
				<property>
					<name>max_file_size_mb</name>
					<value>${pdf_max_file_size_mb}</value>
				</property>
				<property>
					<name>default_cache_location</name>
					<value>${metadataextraction_default_cache_location}</value>
				</property>
				<property>
					<name>output_name_meta</name>
					<value>meta</value>
				</property>
				<property>
					<name>output_name_fault</name>
					<value>fault</value>
				</property>
				<property>
					<name>output_root</name>
					<value>${workingDir}/metadata_extractor/out</value>
				</property>
				<!-- all the other properties are autmatically propagated -->
			</configuration>
		</sub-workflow>
		<ok to="import_urlbased_joining" />
		<error to="fail" />
	</action>

	<join name="import_urlbased_joining" to="union_extracted_document_metadata" />

	<!-- merging extracted document metadata datastores (including new text field): 1) extracted from PDF documents 2) ingested from XML JATS documents -->
	<action name="union_extracted_document_metadata">
		<sub-workflow>
			<app-path>${wf:appPath()}/transformers_common_union</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/transformers_common_union_extracted_document_metadata/working_dir</value>
				</property>
				<property>
					<name>input_a</name>
					<value>${workingDir}/transformers_ingest_pmc_metadata/out</value>
				</property>
				<property>
					<name>input_b</name>
					<value>${workingDir}/metadata_extractor/out/meta</value>
				</property>
				<property>
					<name>output</name>
					<value>${workingDir}/transformers_common_union_extracted_document_metadata/output</value>
				</property>
				<property>
					<name>schema</name>
					<value>eu.dnetlib.iis.metadataextraction.schemas.ExtractedDocumentMetadata</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="transformers_extracted_document_metadata_to_text" />
		<error to="fail" />
	</action>

	<action name="transformers_extracted_document_metadata_to_text">
		<sub-workflow>
			<app-path>${wf:appPath()}/transformer_metadataextraction_documenttext</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/transformer_metadataextraction_documenttext/working_dir</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/transformers_common_union_extracted_document_metadata/output</value>
				</property>
				<property>
					<name>output</name>
					<value>${workingDir}/transformer_metadataextraction_documenttext/output</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="transformers_common_union_document_text" />
		<error to="fail" />
	</action>

	<!-- merging document text datastores: 1) retrieved directly from objectstore 2) extracted from extracted_document_metadata 3) ingested from HTML -->
	<action name="transformers_common_union_document_text">
		<sub-workflow>
			<app-path>${wf:appPath()}/transformers_common_union3</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/transformers_common_union_document_text/working_dir</value>
				</property>
				<property>
					<name>input_a</name>
					<value>${workingDir}/import_plaintext/imported</value>
				</property>
				<property>
					<name>input_b</name>
					<value>${workingDir}/transformer_metadataextraction_documenttext/output</value>
				</property>
				<property>
					<name>input_c</name>
					<value>${workingDir}/ingest_html_plaintext/imported</value>
				</property>
				<property>
					<name>output</name>
					<value>${output_document_text}</value>
				</property>
				<property>
					<name>schema</name>
					<value>eu.dnetlib.iis.metadataextraction.schemas.DocumentText</value>
				</property>
			</configuration>
		</sub-workflow>
		<ok to="import_joining" />
		<error to="fail" />
	</action>

	<action name="wos_url_import">
		<sub-workflow>
			<app-path>${wf:appPath()}/import_content_url</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/wos_url_import/working_dir</value>
				</property>
				<property>
					<name>approved_objectstores_csv</name>
					<value>${wos_plaintext_objectstores_csv}</value>
				</property>
				<property>
					<name>output_root</name>
					<value>${workingDir}/wos_url_import/imported</value>
				</property>
				<property>
					<name>output_name_wos</name>
					<value>wos</value>
				</property>
				<!-- all the other properties autmatically propagated -->
			</configuration>
		</sub-workflow>
		<ok to="wos_import_plaintext" />
		<error to="fail" />
	</action>

	<action name="wos_import_plaintext">
		<sub-workflow>
			<app-path>${wf:appPath()}/import_plaintext</app-path>
			<propagate-configuration />
			<configuration>
				<property>
					<name>workingDir</name>
					<value>${workingDir}/wos_import_plaintext/working_dir</value>
				</property>
				<property>
					<name>input</name>
					<value>${workingDir}/wos_url_import/imported/wos</value>
				</property>
				<property>
					<name>max_file_size_mb</name>
					<value>${text_xml_max_file_size_mb}</value>
				</property>
				<property>
					<name>output</name>
					<value>${output_wos_text}</value>
				</property>
				<!-- all the other properties are autmatically propagated -->
			</configuration>
		</sub-workflow>
		<ok to="import_joining" />
		<error to="fail" />
	</action>

	<join name="import_joining" to="init-faults-dir" />

	<action name="init-faults-dir">
		<fs>
			<delete path="${nameNode}${output_faults}" />
			<mkdir path="${nameNode}${output_faults}" />
		</fs>
		<ok to="preserve-metadataextraction-faults" />
		<error to="fail" />
	</action>

	<action name="preserve-metadataextraction-faults">
		<distcp xmlns="uri:oozie:distcp-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<arg>${nameNode}${workingDir}/metadata_extractor/out/fault</arg>
			<arg>${nameNode}${output_faults}/metadataextraction</arg>
		</distcp>
		<ok to="preserve-ingest_pmc_metadata-faults" />
		<error to="fail" />
	</action>

	<action name="preserve-ingest_pmc_metadata-faults">
		<distcp xmlns="uri:oozie:distcp-action:0.1">
			<job-tracker>${jobTracker}</job-tracker>
			<name-node>${nameNode}</name-node>
			<arg>${nameNode}${workingDir}/ingest_pmc_metadata/out/fault</arg>
			<arg>${nameNode}${output_faults}/ingest_pmc_metadata</arg>
		</distcp>
		<ok to="finalize" />
		<error to="fail" />
	</action>

	<decision name="finalize">
		<switch>
			<case to="remove_sideproducts">${remove_sideproducts eq "true"}</case>
			<default to="end" />
		</switch>
	</decision>

	<action name="remove_sideproducts">
		<fs>
			<delete path="${nameNode}${workingDir}" />
		</fs>
		<ok to="end" />
		<error to="fail" />
	</action>

	<kill name="fail">
		<message>Unfortunately, the process failed -- error message:
			[${wf:errorMessage(wf:lastErrorNode())}]</message>
	</kill>
	<end name="end" />
</workflow-app>
