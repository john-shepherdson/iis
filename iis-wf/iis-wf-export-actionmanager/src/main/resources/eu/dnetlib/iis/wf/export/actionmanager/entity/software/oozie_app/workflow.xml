<workflow-app xmlns="uri:oozie:workflow:0.4" name="export_actionmanager_software">
    
    <parameters>
        <property>
            <name>input_document_to_software_url</name>
            <description>Input containing eu.dnetlib.iis.referenceextraction.softwareurl.schemas.DocumentToSoftwareUrlWithMeta avro records 
                listing all software entities referenced by publications.</description>
        </property>
        <property>
            <name>input_document_metadata</name>
            <description>Input containing eu.dnetlib.iis.transformers.metadatamerger.schemas.ExtractedDocumentMetadataMergedWithOriginal avro records.
                Required for generating alternative software titles based on software -> publication relations.</description>
        </property>
        <property>
            <name>action_set_id_entity_software</name>
            <description>Identifier of action set holding software entities.
            It also defines ${output_root_entities} subdirectory name where all software entity actions are exported.</description>
        </property>
        <property>
            <name>action_set_id_document_software_url</name>
            <description>document to software url action-set identifier of exported data.
            It also defines ${output_root_relations} subdirectory name where all software relation actions are exported.</description>
        </property>
        <property>
            <name>trust_level_threshold_document_software_url</name>
            <value>$UNDEFINED$</value>
            <description>document_software_url trust level threshold</description>
        </property>
        <property>
            <name>output_root_entities</name>
            <description>root directory for storing ${action_set_id_entity_software} subdirectories with exported actionset</description>
        </property>
        <property>
            <name>output_root_relations</name>
            <description>root directory for storing ${action_set_id_document_software_url} subdirectories with exported actionsets</description>
        </property>
        <property>
            <name>output_report_root_path</name>
            <description>base directory for storing reports</description>
        </property>
        <property>
            <name>output_report_relative_path</name>
            <value>export_software</value>
            <description>directory for storing report (relative to output_report_root_path)</description>
        </property>
        <property>
            <name>sparkDriverMemory</name>
            <description>memory for driver process</description>
        </property>
        <property>
            <name>sparkExecutorMemory</name>
            <description>memory for individual executor</description>
        </property>
        <property>
            <name>sparkExecutorCores</name>
            <description>number of cores used by single executor</description>
        </property>
        <property>
            <name>oozieActionShareLibForSpark2</name>
            <description>oozie action sharelib for spark 2.*</description>
        </property>
        <property>
            <name>spark2ExtraListeners</name>
            <value>com.cloudera.spark.lineage.NavigatorAppListener</value>
            <description>spark 2.* extra listeners classname</description>
        </property>
        <property>
            <name>spark2SqlQueryExecutionListeners</name>
            <value>com.cloudera.spark.lineage.NavigatorQueryListener</value>
            <description>spark 2.* sql query execution listeners classname</description>
        </property>
        <property>
            <name>spark2YarnHistoryServerAddress</name>
            <description>spark 2.* yarn history server address</description>
        </property>
        <property>
            <name>spark2EventLogDir</name>
            <description>spark 2.* event log dir location</description>
        </property>
    </parameters>
    
    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
            <property>
                <name>oozie.action.sharelib.for.spark</name>
                <value>${oozieActionShareLibForSpark2}</value>
            </property>
        </configuration>
    </global>

    <start to="software-exporter" />

    <action name="software-exporter">
        <spark xmlns="uri:oozie:spark-action:0.2">

            <master>yarn-cluster</master>
            <mode>cluster</mode>
            <name>software spark exporter</name>
            <class>eu.dnetlib.iis.wf.export.actionmanager.entity.SoftwareExporterJob</class>
            <jar>${oozieTopWfApplicationPath}/lib/iis-wf-export-actionmanager-${projectVersion}.jar</jar>
            
            <spark-opts>
                --executor-memory=${sparkExecutorMemory}
                --executor-cores=${sparkExecutorCores}
                --driver-memory=${sparkDriverMemory}
                --conf spark.extraListeners=${spark2ExtraListeners}
                --conf spark.sql.queryExecutionListeners=${spark2SqlQueryExecutionListeners}
                --conf spark.yarn.historyServer.address=${spark2YarnHistoryServerAddress}
                --conf spark.eventLog.dir=${nameNode}${spark2EventLogDir}
            </spark-opts>

            <arg>-trustLevelThreshold=${trust_level_threshold_document_software_url}</arg>

            <arg>-inputDocumentToSoftwareAvroPath=${input_document_to_software_url}</arg>
            <arg>-inputDocumentMetadataAvroPath=${input_document_metadata}</arg>
            
            <arg>-outputEntityPath=${output_root_entities}/${action_set_id_entity_software}</arg>
            <arg>-outputRelationPath=${output_root_relations}/${action_set_id_document_software_url}</arg>
            <arg>-outputReportPath=${output_report_root_path}/${output_report_relative_path}</arg>

        </spark>
        <ok to="end" />
        <error to="fail" />
    </action>

    <kill name="fail">
        <message>Unfortunately, the process failed -- error message:
            [${wf:errorMessage(wf:lastErrorNode())}]
        </message>
    </kill>
    
    <end name="end" />
    
</workflow-app>